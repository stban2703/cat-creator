{"version":3,"sources":["components/CatView/CatView.tsx","utils/getImageSrcFromUrl.ts","components/AttributeItem/AttributeItem.tsx","components/AttributeSelection/AttributeSelection.tsx","components/AttributeColorSection/AttributeColorSection.tsx","utils/lightenDarkColor.ts","components/AttributeTypeItem/AttributeTypeItem.tsx","components/AttributeTypeSection/AttributeTypeSection.tsx","components/AttributeOptions/AttributeOptions.tsx","utils/getTitleFromAttribute.ts","utils/getSubtitleFromAttribute.ts","utils/getColorListFromAttribute.ts","components/CatControl/CatControl.tsx","components/EditPanel/EditPanel.tsx","containers/Creator/Creator.tsx","containers/Intro/Intro.tsx","containers/App/initialCatProps.ts","containers/App/initialAttributeOptions.ts","containers/App/App.tsx","index.tsx"],"names":["CatView","catProps","currentAttribute","catFur","settings","catEyes","camera","handleCamera","className","path","process","selector","fill","stroke","baseUrl","getImageSrcFromUrl","url","includes","AttributeItem","value","checked","onChangeCurrentAttribute","imageSrc","onClick","src","alt","AttributeSelection","attributeOptions","map","id","AttributeColorSection","colorList","onEditAttributeColor","useState","color","setColor","onChange","hex","colorStroke","amt","usePound","slice","num","parseInt","r","b","g","toString","lightenDarkenColor","colors","AttributeTypeItem","onEditAttributeType","checkedSrc","AttributeTypeSection","itemList","subtitle","AttributeOptions","title","attribute","getTitleFromAttribute","getSubtitleFromAttribute","getColorListFromAttribute","CatControl","catName","onEditCatName","type","name","placeholder","event","target","to","EditPanel","newAttribute","index","findIndex","elem","getItemListFromId","Creator","Intro","initialCatProps","creationDate","Date","now","shadow","initialAttributeOptions","App","setCatProps","setAttributeList","setCurrentAttribute","handleCatName","newName","catPropsCopy","handleCurrentAttribute","newCurrentAttribute","copy","forEach","e","handleAttributeType","newType","catSettingsIndex","settingsOptionsCopy","settingsOptionsIndex","console","log","handleAttributeColor","colorFill","catSettingsCopy","basename","exact","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.554915e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { SvgLoader, SvgProxy } from \"react-svgmt\";\r\nimport './CatView.css';\r\n\r\ninterface CatViewProps {\r\n    catProps: CatPropsType;\r\n    currentAttribute: string;\r\n}\r\n\r\nexport const CatView: React.FC<CatViewProps> = ({ catProps, currentAttribute }) => {\r\n    const catFur = catProps.settings[0];\r\n    const catEyes = catProps.settings[1];\r\n    const handleCamera = (currentAttribute: string) => {\r\n        switch (currentAttribute) {\r\n            default:\r\n                return \"\";\r\n            case \"eyes\":\r\n                return \"CatView__model--eyes\";\r\n            case \"necklace\":\r\n                return \"CatView__model--necklace\"\r\n            case \"hat\":\r\n                return \"CatView__model--hat\"\r\n        }\r\n    }\r\n    const camera = handleCamera(currentAttribute)\r\n    return (\r\n        <article className=\"CatView\">\r\n            <SvgLoader className={`CatView__model ${camera}`} path={`${process.env.PUBLIC_URL}/images/render/catrender.svg`}>\r\n                <SvgProxy selector=\"#eye-left-color\" fill={catEyes.fill} />\r\n                <SvgProxy selector=\"#eye-right-color\" fill={catEyes.fill} />\r\n                <SvgProxy selector=\"#eye-left-shadow\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#eye-right-shadow\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#mouth\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-left-1\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-left-2\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-left-3\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-right-1\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-right-2\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#whisker-right-3\" fill={catFur.stroke} />\r\n                <SvgProxy selector=\"#head\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#ear-left-outside\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#ear-right-outside\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#body-front\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#body-back\" fill={catFur.fill} stroke={catFur.stroke}  />\r\n                <SvgProxy selector=\"#paw-left\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#paw-right\" fill={catFur.fill} stroke={catFur.stroke} />\r\n                <SvgProxy selector=\"#tail\" fill={catFur.fill} stroke={catFur.stroke} />\r\n            </SvgLoader>\r\n        </article>\r\n    )\r\n}","const baseUrl = `${process.env.PUBLIC_URL}/images/`\r\n\r\nexport const getImageSrcFromUrl = (url: string) => {\r\n    if (url.includes(\"blank\")) {\r\n        return undefined;\r\n    } else return `${baseUrl}${url}.svg`;\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeItem.css'\r\n\r\ninterface AttributeItemProps {\r\n    value: string;\r\n    url: string;\r\n    checked: boolean;\r\n    onChangeCurrentAttribute: () => void;\r\n}\r\n\r\nexport const AttributeItem:React.FC<AttributeItemProps> = ({ value, url, checked, onChangeCurrentAttribute }) => {\r\n    const imageSrc = getImageSrcFromUrl(url)\r\n\r\n    return(\r\n        <div className={`AttributeItem${checked ? \" AttributeItem--selected\" : \"\"}`} onClick={onChangeCurrentAttribute}>\r\n            <img className={`AttributeItem__image`} src={imageSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeItem } from '../AttributeItem/AttributeItem';\r\nimport './AttributeSelection.css';\r\n\r\ninterface AttributeSelectionProps {\r\n    attributeOptions: AttributeOptionType[];\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const AttributeSelection: React.FC<AttributeSelectionProps> = ({ attributeOptions, onChangeCurrentAttribute }) => {\r\n    return (\r\n        <section className=\"AttributeSelection\">\r\n            {attributeOptions.map(({ id, url, checked }) => {\r\n                const intermediateChangeAttribute = () => {\r\n                    onChangeCurrentAttribute(id)\r\n                }\r\n                return <AttributeItem key={id} value={id} url={url} checked={checked} onChangeCurrentAttribute={intermediateChangeAttribute}/>\r\n            })}\r\n        </section>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { ColorResult, TwitterPicker } from 'react-color';\r\nimport { lightenDarkenColor } from '../../utils/lightenDarkColor';\r\nimport './AttributeColorSection.css';\r\n\r\ninterface AttributeColorSectionProps {\r\n    colorList: string[];\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n}\r\n\r\nexport const AttributeColorSection: React.FC<AttributeColorSectionProps> = ({ colorList, onEditAttributeColor }) => {\r\n\r\n    const [color, setColor] = useState(\"#FFFFFF\");\r\n    const handleColor = (color: ColorResult) => {\r\n        setColor(color.hex);\r\n        const colorStroke = lightenDarkenColor(color.hex, -80);\r\n        onEditAttributeColor(color.hex, colorStroke)\r\n    };\r\n    // Original list: ['#FFFFFF', '#EBEBEB', '#ABB8C3', '#000000', '#0BF86A', '#8ED1FC', '#FF6900', '#FCB900', '#EB144C', '#F78DA7', '#9900EF']\r\n    return (\r\n        <section className=\"AttributeColorSection\">\r\n            <h3 className=\"AttributeColorSection__title\">Color</h3>\r\n            <TwitterPicker color={color} onChange={handleColor} colors={colorList} />\r\n        </section>\r\n    )\r\n}","export const lightenDarkenColor = (color: string, amt: number) => {\r\n    // https://css-tricks.com/snippets/javascript/lighten-darken-color/\r\n    let usePound = false;\r\n    if (color[0] === \"#\") {\r\n        color = color.slice(1);\r\n        usePound = true;\r\n    }\r\n    let num = parseInt(color, 16);\r\n    let r = (num >> 16) + amt;\r\n    if (r > 255) r = 255;\r\n    else if (r < 0) r = 0;\r\n    let b = ((num >> 8) & 0x00FF) + amt;\r\n    if (b > 255) b = 255;\r\n    else if (b < 0) b = 0;\r\n    let g = (num & 0x0000FF) + amt;\r\n    if (g > 255) g = 255;\r\n    else if (g < 0) g = 0;\r\n\r\n    // https://stackoverflow.com/questions/12043187/how-to-check-if-hex-color-is-too-black\r\n    let luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n\r\n    if (luma < 30) {\r\n        let num = parseInt(color, 16);\r\n        let r = (num >> 16) + 80;\r\n        if (r > 255) r = 255;\r\n        else if (r < 0) r = 0;\r\n        let b = ((num >> 8) & 0x00FF) + 80;\r\n        if (b > 255) b = 255;\r\n        else if (b < 0) b = 0;\r\n        let g = (num & 0x0000FF) + 80;\r\n        if (g > 255) g = 255;\r\n        else if (g < 0) g = 0;\r\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n    }\r\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeTypeItem.css';\r\n\r\ninterface AttributeTypeItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    url: string;\r\n    onEditAttributeType: () => void;\r\n}\r\n\r\nexport const AttributeTypeItem: React.FC<AttributeTypeItemProps> = ({ value, url, checked, onEditAttributeType }) => {\r\n    const imageSrc = getImageSrcFromUrl(url);\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n\r\n    return (\r\n        <div className=\"AttributeTypeItem\" onClick={onEditAttributeType}>\r\n            <img className=\"AttributeTypeItem__image\" src={imageSrc} alt=\"\" />\r\n            <img className={`AttributeTypeItem__check${checked ? '' : ' AttributeTypeItem__check--remove'}`} src={checkedSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeTypeItem } from '../AttributeTypeItem/AttributeTypeItem';\r\nimport './AttributeTypeSection.css';\r\n\r\ninterface AttributeTypeSectionProps {\r\n    itemList: { id: number, value: string, url: string, checked: boolean }[];\r\n    subtitle: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n}\r\n\r\nexport const AttributeTypeSection: React.FC<AttributeTypeSectionProps> = ({ itemList, subtitle, onEditAttributeType }) => {\r\n    return (\r\n        <section className=\"AttributeTypeSection\">\r\n            <h3 className=\"AttributeTypeSection__title\">{subtitle}</h3>\r\n            <div className=\"AttributeTypeSection__items\">\r\n                {itemList.map(({ id, value, url, checked }) => {\r\n                    const intermediateEditType = () => {\r\n                        onEditAttributeType(value);\r\n                    }\r\n                    return <AttributeTypeItem key={id} value={value} url={url} checked={checked} onEditAttributeType={intermediateEditType} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getColorListFromAttribute } from '../../utils/getColorListFromAttribute';\r\nimport { getSubtitleFromAttribute } from '../../utils/getSubtitleFromAttribute';\r\nimport { getTitleFromAttribute } from '../../utils/getTitleFromAttribute';\r\nimport { TypeItemType } from '../../utils/TypeItemType';\r\nimport { AttributeColorSection } from '../AttributeColorSection/AttributeColorSection';\r\nimport { AttributeTypeSection } from '../AttributeTypeSection/AttributeTypeSection';\r\nimport \"./AttributeOptions.css\";\r\n\r\ninterface AttributeOptionsProps {\r\n    currentAttribute: string;\r\n    itemList: TypeItemType[];\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n}\r\n\r\nexport const AttributeOptions: React.FC<AttributeOptionsProps> = ({ currentAttribute, itemList, onEditAttributeType, onEditAttributeColor }) => {\r\n    const title = getTitleFromAttribute(currentAttribute);\r\n    const subtitle = getSubtitleFromAttribute(currentAttribute);\r\n    const colorList = getColorListFromAttribute(currentAttribute);\r\n\r\n    switch (currentAttribute) {\r\n        case \"scene\":\r\n            return (\r\n                <section className=\"AttributeOptions\">\r\n                    <h2 className=\"AttributeOptions__title\">{title}</h2>\r\n\r\n                </section>\r\n            )\r\n\r\n        default:\r\n            return (\r\n                <section className=\"AttributeOptions\">\r\n                    <h2 className=\"AttributeOptions__title\">{title}</h2>\r\n                    <AttributeTypeSection itemList={itemList} subtitle={subtitle!} onEditAttributeType={onEditAttributeType} />\r\n                    <AttributeColorSection colorList={colorList} onEditAttributeColor={onEditAttributeColor} />\r\n                </section>\r\n            )\r\n    }\r\n}","export const getTitleFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return \"Pelaje\";\r\n\r\n        case \"eyes\":\r\n            return \"Ojos\";\r\n\r\n        case \"necklace\":\r\n            return \"Collar\";\r\n\r\n        case \"hat\":\r\n            return \"Sombrero\";\r\n\r\n        case \"scene\":\r\n            return \"Escenario\";\r\n    }\r\n}","export const getSubtitleFromAttribute = (currentAttribute: string) => {\r\n    switch (currentAttribute) {\r\n        case \"fur\":\r\n            return \"Patrón\"\r\n        case \"eyes\":\r\n            return \"Pupila\"\r\n        case \"necklace\":\r\n            return \"Accesorio\"\r\n        case \"hat\":\r\n            return \"Tipo\"\r\n    }\r\n}","export const getColorListFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n        default:\r\n            return [\r\n                '#FFFFFF',\r\n                '#EBEBEB',\r\n                '#ABB8C3',\r\n                '#8ED1FC',\r\n                '#FF6900',\r\n                '#FCB900',\r\n                '#F78DA7',\r\n                '#000000'\r\n            ]\r\n        case \"eyes\":\r\n            return [\r\n                '#ABB8C3',\r\n                '#000000',\r\n                '#0BF86A',\r\n                '#8ED1FC',\r\n                '#FF6900',\r\n                '#FCB900',\r\n                '#EB144C',\r\n                '#F78DA7',\r\n                '#9900EF'\r\n            ]\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './CatControl.css';\r\n\r\ninterface CatControlProps {\r\n    catName: string;\r\n    onEditCatName: (newName: string) => void;\r\n}\r\n\r\nexport const CatControl: React.FC<CatControlProps> = ({ catName, onEditCatName }) => {\r\n    const handleTextChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        onEditCatName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <form className=\"CatControl\">\r\n            <input className=\"CatControl__input\" type=\"text\" name=\"catName\" value={catName} placeholder=\"Escribe el nombre de tu gato\" onChange={handleTextChange} />\r\n            <div className=\"CatControl__options\">\r\n                <div className=\"CatControl__section\">\r\n                    <button className=\"CatControl__btn CatControl__btn--green\">\r\n                        Guardar\r\n                    </button>\r\n                    <button className=\"CatControl__btn CatControl__btn--default\">\r\n                        Por defecto\r\n                    </button>\r\n                </div>\r\n                <div className=\"CatControl__section\">\r\n                    <Link className=\"CatControl__btn CatControl__btn--navegate\" to={'/'}>\r\n                        Ver creados\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeSelection } from '../AttributeSelection/AttributeSelection';\r\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\r\nimport './EditPanel.css';\r\nimport { CatControl } from '../CatControl/CatControl';\r\n\r\ninterface EditPanelProps {\r\n    catName: string;\r\n    attributeOptions: AttributeOptionType[];\r\n    currentAttribute: string;\r\n    onEditCatName: (newName: string) => void;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const EditPanel: React.FC<EditPanelProps> = ({ catName, attributeOptions, currentAttribute, onEditCatName, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    const getItemListFromId = (newAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.id === newAttribute;\r\n        })\r\n        const newItemList = attributeOptions[index].itemList;\r\n        return newItemList;\r\n    };\r\n\r\n    const itemList = getItemListFromId(currentAttribute);\r\n\r\n    return (\r\n        <article className=\"EditPanel\">\r\n            <AttributeSelection attributeOptions={attributeOptions} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n            <AttributeOptions currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} itemList={itemList} />\r\n            <CatControl catName={catName} onEditCatName={onEditCatName} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\n//import { useParams } from 'react-router';\r\nimport { CatView } from '../../components/CatView/CatView';\r\nimport { EditPanel } from '../../components/EditPanel/EditPanel';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport './Creator.css';\r\n\r\ninterface CreatorProps {\r\n    catProps: CatPropsType;\r\n    attributeOptions: AttributeOptionType[];\r\n    currentAttribute: string;\r\n    onEditCatName: (newName: string) => void;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const Creator: React.FC<CreatorProps> = ({ catProps, attributeOptions, currentAttribute, onEditCatName, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    //const { id } = useParams<{ id: string }>();\r\n\r\n    return (\r\n        <article className=\"Creator\">\r\n            <CatView catProps={catProps} currentAttribute={currentAttribute} />\r\n            <div className=\"Creator__empty\"></div>\r\n            <EditPanel catName={catProps.catName} onEditCatName={onEditCatName} attributeOptions={attributeOptions} currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Intro.css'\r\n\r\ninterface IntroProps {\r\n\r\n}\r\n\r\nexport const Intro: React.FC<IntroProps> = () => {\r\n    return (\r\n        <article className=\"Intro\">\r\n            <section className=\"Intro__container\">\r\n                <h1 className=\"Intro__title\" >Cat creator</h1>\r\n                <section className=\"Intro__controls\">\r\n                    <Link className=\"Intro__btn\" to={`/create`}>Crear un gato</Link>\r\n                    <Link className=\"Intro__btn Intro__btn--gray\" to={`/cats`}>Ver creados</Link>\r\n                </section>\r\n            </section>\r\n        </article>\r\n    )\r\n}","export const initialCatProps = {\r\n    id: 0,\r\n    catName: \"\",\r\n    creationDate: Date.now(),\r\n    settings: [\r\n        {\r\n            id: \"fur\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"#EBEBEB\",\r\n            stroke: \"#AFAFAF\"\r\n        },\r\n        {\r\n            id: \"eyes\",\r\n            type: \"expanded\",\r\n            fill: \"#0BF86A\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"necklace\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"hat\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n    ]\r\n}","export const initialAttributeOptions = [\r\n    {\r\n        id: \"fur\",\r\n        url: \"attributes/fur\",\r\n        checked: true,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true,\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"lines\",\r\n                url: \"items/lines\",\r\n                checked: false,\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"colorAndWhite\",\r\n                url: \"items/colorAndWhite\",\r\n                checked: false,\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"siamese\",\r\n                url: \"items/siamese\",\r\n                checked: false,\r\n            },\r\n            {\r\n                id: 4,\r\n                value: \"tricolor\",\r\n                url: \"items/tricolor\",\r\n                checked: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"eyes\",\r\n        url: \"attributes/eyes\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"expanded\",\r\n                url: \"items/expanded\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"normal\",\r\n                url: \"items/normal\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 2,\r\n                value: \"contracted\",\r\n                url: \"items/contracted\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"necklace\",\r\n        url: \"attributes/necklace\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"round\",\r\n                url: \"items/round\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"heart\",\r\n                url: \"items/heart\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"ribbon\",\r\n                url: \"items/ribbon\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"hat\",\r\n        url: \"attributes/hat\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"scene\",\r\n        url: \"attributes/scene\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n    }\r\n];","import React, { useState } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Creator } from '../Creator/Creator';\r\nimport { Intro } from '../Intro/Intro';\r\nimport './App.css';\r\nimport { initialCatProps } from './initialCatProps';\r\nimport { initialAttributeOptions } from './initialAttributeOptions';\r\n\r\nexport const App = () => {\r\n    const [catProps, setCatProps] = useState(initialCatProps);\r\n    const [attributeOptions, setAttributeList] = useState(initialAttributeOptions);\r\n    const [currentAttribute, setCurrentAttribute] = useState(\"fur\");\r\n\r\n    const handleCatName = (newName: string) => {\r\n        const catPropsCopy = { ...catProps };\r\n        catPropsCopy.catName = newName;\r\n        setCatProps(catPropsCopy);\r\n    }\r\n\r\n    const handleCurrentAttribute = (newCurrentAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        copy.forEach(e => {\r\n            if (e.id === newCurrentAttribute) {\r\n                e.checked = true;\r\n            } else e.checked = false;\r\n        })\r\n        setAttributeList(copy);\r\n        setCurrentAttribute(newCurrentAttribute);\r\n    }\r\n\r\n    const handleAttributeType = (newType: string) => {\r\n        const catPropsCopy = { ...catProps };\r\n        const catSettingsIndex = catPropsCopy.settings.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catPropsCopy.settings[catSettingsIndex].type = newType;\r\n\r\n        const settingsOptionsCopy = attributeOptions.slice();\r\n        const settingsOptionsIndex = settingsOptionsCopy.findIndex(elem => {\r\n            return elem.id === currentAttribute;\r\n        })\r\n\r\n        settingsOptionsCopy[settingsOptionsIndex].itemList.forEach(elem => {\r\n            if (elem.value === catPropsCopy.settings[catSettingsIndex].type) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n\r\n        if (currentAttribute === \"fur\") {\r\n            console.log(catPropsCopy.settings[catSettingsIndex].type)\r\n        }\r\n\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(settingsOptionsCopy);\r\n    }\r\n\r\n    const handleAttributeColor = (colorFill: string, colorStroke: string) => {\r\n        const catPropsCopy = { ...catProps };\r\n        const catSettingsCopy = catPropsCopy.settings;\r\n\r\n        const catSettingsIndex = catSettingsCopy.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catSettingsCopy[catSettingsIndex].fill = colorFill;\r\n        catSettingsCopy[catSettingsIndex].stroke = colorStroke;\r\n\r\n        catPropsCopy.settings = catSettingsCopy;\r\n\r\n        setCatProps(catPropsCopy);\r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <Route path=\"/\" exact render={() => <Intro />} />\r\n                <Route path=\"/create\" render={() =>\r\n                    <Creator catProps={catProps} attributeOptions={attributeOptions} currentAttribute={currentAttribute} onEditCatName={handleCatName} onEditAttributeType={handleAttributeType} onEditAttributeColor={handleAttributeColor} onChangeCurrentAttribute={handleCurrentAttribute} />}\r\n                />\r\n            </HashRouter>\r\n        </main>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}