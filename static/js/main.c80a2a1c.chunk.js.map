{"version":3,"sources":["components/CatView/CatView.tsx","components/AttributeItem/AttributeItem.tsx","utils/getAttributeSrcFromValue.ts","components/AttributeSelection/AttributeSelection.tsx","components/ColorItem/ColorItem.tsx","components/ColorSection/ColorSection.tsx","components/EditItem/EditItem.tsx","utils/getTypeSrcFromValue.ts","components/EditSection/EditSection.tsx","components/EditOptions/EditOptions.tsx","utils/getTitleFromAttribute.ts","components/EditPanel/EditPanel.tsx","containers/Creator/Creator.tsx","containers/Intro/Intro.tsx","containers/App/App.tsx","index.tsx"],"names":["CatView","catProps","className","attribute","type","color","AttributeItem","value","checked","onChangeCurrentAttribute","imageSrc","getAttributeSrcFromValue","onClick","src","alt","AttributeSelection","attributeList","map","id","ColorItem","onEditAttributeColor","style","backgroundColor","ColorSection","colorList","EditItem","onEditAttributeType","getTypeSrcFromValue","EditSection","itemList","EditOptions","currentAttribute","title","getTitleFromAttribute","EditPanel","newAttribute","index","slice","findIndex","elem","getItemListFromAttribute","getColorListFromAttribute","Creator","Intro","to","initialProps","initialAttributes","App","useState","setCatProps","setAttributeList","setCurrentAttribute","handleCurrentAttribute","newCurrentAttribute","copy","forEach","e","handleAttributeType","newType","catPropsCopy","catIndex","attributeListCopy","attributeIndex","handleAttributeColor","newColor","basename","process","path","render","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c80a2a1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CatPropType } from '../../utils/CatPropType';\r\nimport './CatView.css';\r\n\r\ninterface CatViewProps {\r\n    catProps: CatPropType[];\r\n}\r\n\r\nexport const CatView: React.FC<CatViewProps> = ({ catProps }) => {\r\n    return (\r\n        <article className=\"CatView\">\r\n            <h4>Atributo: {catProps[0].attribute} = Tipo: {catProps[0].type} y Color: {catProps[0].color}</h4>\r\n            <h4>Atributo: {catProps[1].attribute} = Tipo: {catProps[1].type} y Color: {catProps[1].color}</h4>\r\n            <h4>Atributo: {catProps[2].attribute} = Tipo: {catProps[2].type} y Color: {catProps[2].color}</h4>\r\n            <h4>Atributo: {catProps[3].attribute} = Tipo: {catProps[3].type} y Color: {catProps[3].color}</h4>\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\nimport { getAttributeSrcFromValue } from '../../utils/getAttributeSrcFromValue';\r\nimport './AttributeItem.css'\r\n\r\ninterface AttributeItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    onChangeCurrentAttribute: () => void;\r\n}\r\n\r\nexport const AttributeItem:React.FC<AttributeItemProps> = ({ value, checked, onChangeCurrentAttribute }) => {\r\n    const imageSrc = getAttributeSrcFromValue(value);\r\n    return(\r\n        <div className={`AttributeItem${checked ? \" AttributeItem--selected\" : \"\"}`} onClick={onChangeCurrentAttribute}>\r\n            <img className={`AttributeItem__image`} src={imageSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","const baseAttributeUrl = 'images/attributes/'\r\n\r\nexport const getAttributeSrcFromValue = (value: string) => {\r\n    return `${baseAttributeUrl}${value}.svg`;\r\n}","import React from 'react';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { AttributeItem } from '../AttributeItem/AttributeItem';\r\nimport './AttributeSelection.css';\r\n\r\ninterface AttributeSelectionProps {\r\n    attributeList: AttributeType[];\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const AttributeSelection: React.FC<AttributeSelectionProps> = ({ attributeList, onChangeCurrentAttribute }) => {\r\n    return (\r\n        <section className=\"AttributeSelection\">\r\n            {attributeList.map(({ id, attribute, checked }) => {\r\n\r\n                const intermediateChangeAttribute = () => {\r\n                    onChangeCurrentAttribute(attribute)\r\n                }\r\n\r\n                return <AttributeItem key={id} value={attribute} checked={checked} onChangeCurrentAttribute={intermediateChangeAttribute}/>\r\n            })}\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport './ColorItem.css';\r\n\r\ninterface ColorItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    onEditAttributeColor: () => void;\r\n}\r\n\r\nexport const ColorItem: React.FC<ColorItemProps> = ({ value, checked, onEditAttributeColor }) => {\r\n    return (\r\n        <div className=\"ColorItem\" style={ {backgroundColor: value} } onClick={onEditAttributeColor}>\r\n            <img className={`ColorItem__check${checked ? '' : ' ColorItem__check--remove'}`} src=\"images/items/checked.svg\" alt=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorType } from '../../utils/ColorType';\r\nimport { ColorItem } from '../ColorItem/ColorItem';\r\nimport './ColorSection.css';\r\n\r\ninterface ColorSectionProps {\r\n    colorList: ColorType[];\r\n    onEditAttributeColor: (newColor: string) => void;\r\n}\r\n\r\nexport const ColorSection: React.FC<ColorSectionProps> = ({ colorList, onEditAttributeColor }) => {\r\n    return(\r\n        <section className=\"ColorSection\">\r\n            <h3 className=\"ColorSection__title\">Color</h3>\r\n            <div className=\"ColorSection__items\">\r\n                {colorList.map(({ id, value, checked}) => {\r\n                    const intermediateEditColor = () => {\r\n                        onEditAttributeColor(value);\r\n                    }\r\n                    return <ColorItem key={id} value={value} checked={checked} onEditAttributeColor={intermediateEditColor} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getTypeSrcFromValue } from '../../utils/getTypeSrcFromValue';\r\nimport './EditItem.css';\r\n\r\ninterface EditItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    onEditAttributeType: () => void;\r\n}\r\n\r\nexport const EditItem: React.FC<EditItemProps> = ({ value, checked, onEditAttributeType }) => {\r\n    const imageSrc = getTypeSrcFromValue(value);\r\n\r\n    return (\r\n        <div className=\"EditItem\" onClick={onEditAttributeType}>\r\n            <img className=\"EditItem__image\" src={imageSrc} alt=\"\" />\r\n            <img className={`EditItem__check${checked ? '' : ' EditItem__check--remove'}`} src=\"images/items/checked.svg\" alt=\"\" />\r\n        </div>\r\n    )\r\n}","const baseTypeUrl = 'images/items/'\r\n\r\nexport const getTypeSrcFromValue = (value: string) => {\r\n    if(value === \"blank\") {\r\n        return undefined;\r\n    } else return `${baseTypeUrl}${value}.svg`;\r\n}","import React from 'react';\r\nimport { EditItem } from '../EditItem/EditItem';\r\nimport './EditSection.css';\r\n\r\ninterface EditSectionProps {\r\n    itemList: { id: number, value: string, checked: boolean }[];\r\n    onEditAttributeType: (newType: string) => void;\r\n}\r\n\r\nexport const EditSection: React.FC<EditSectionProps> = ({ itemList, onEditAttributeType }) => {\r\n    return (\r\n        <section className=\"EditSection\">\r\n            <h3 className=\"EditSection__title\">Tipo</h3>\r\n            <div className=\"EditSection__items\">\r\n                {itemList.map(({ id, value, checked }) => {\r\n                    const intermediateEditType = () => {\r\n                        onEditAttributeType(value);\r\n                    }\r\n                    return <EditItem key={id} value={value} checked={checked} onEditAttributeType={intermediateEditType} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorType } from '../../utils/ColorType';\r\nimport { getTitleFromAttribute } from '../../utils/getTitleFromAttribute';\r\nimport { ItemType } from '../../utils/ItemType';\r\nimport { ColorSection } from '../ColorSection/ColorSection';\r\nimport { EditSection } from '../EditSection/EditSection';\r\nimport \"./EditOptions.css\";\r\n\r\ninterface EditOptionsProps {\r\n    currentAttribute: string;\r\n    itemList: ItemType[];\r\n    colorList: ColorType[];\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor:string) => void;\r\n}\r\n\r\nexport const EditOptions: React.FC<EditOptionsProps> = ({ currentAttribute, itemList, colorList, onEditAttributeType, onEditAttributeColor }) => {\r\n    //const typeListt = getTypeListByAttribute(currentAttribute);\r\n    const title = getTitleFromAttribute(currentAttribute);\r\n\r\n    return (\r\n        <section className=\"EditOptions\">\r\n            <h2 className=\"EditOptions__title\">{title}</h2>\r\n            <EditSection itemList={itemList} onEditAttributeType={onEditAttributeType} />\r\n            <ColorSection colorList={colorList} onEditAttributeColor={onEditAttributeColor} />\r\n        </section>\r\n    )\r\n}","export const getTitleFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return \"Pelaje\";\r\n\r\n        case \"eyes\":\r\n            return \"Ojos\";\r\n\r\n        case \"necklace\":\r\n            return \"Collar\";\r\n\r\n        case \"hat\":\r\n            return \"Sombrero\";\r\n\r\n        case \"scene\":\r\n            return \"Escenario\";\r\n    }\r\n}","import React from 'react';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { AttributeSelection } from '../AttributeSelection/AttributeSelection';\r\nimport { EditOptions } from '../EditOptions/EditOptions';\r\nimport './EditPanel.css';\r\n\r\ninterface EditPanelProps {\r\n    attributeList: AttributeType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const EditPanel: React.FC<EditPanelProps> = ({ attributeList, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    const getItemListFromAttribute = (newAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.attribute === newAttribute;\r\n        })\r\n        const newItemList = attributeList[index].itemList;\r\n        return newItemList;\r\n    };\r\n\r\n    const getColorListFromAttribute = (newAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.attribute === newAttribute;\r\n        })\r\n        const newColorList = attributeList[index].colorList;\r\n        return newColorList;\r\n    }\r\n\r\n    const itemList = getItemListFromAttribute(currentAttribute);\r\n    const colorList = getColorListFromAttribute(currentAttribute);\r\n\r\n    return (\r\n        <article className=\"EditPanel\">\r\n            <AttributeSelection attributeList={attributeList} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n            <EditOptions currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} itemList={itemList} colorList={colorList} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\n//import { useParams } from 'react-router';\r\nimport { CatView } from '../../components/CatView/CatView';\r\nimport { EditPanel } from '../../components/EditPanel/EditPanel';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { CatPropType } from '../../utils/CatPropType';\r\nimport './Creator.css';\r\n\r\ninterface CreatorProps {\r\n    catProps: CatPropType[];\r\n    attributeList: AttributeType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const Creator: React.FC<CreatorProps> = ({ catProps, attributeList, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    //const { id } = useParams<{ id: string }>();\r\n\r\n    return (\r\n        <article className=\"Creator\">\r\n            <CatView catProps={catProps} />\r\n            <EditPanel attributeList={attributeList} currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IntroProps {\r\n\r\n}\r\n\r\nexport const Intro: React.FC<IntroProps> = () => {\r\n    return(\r\n        <article>\r\n            <h1>Cat creator</h1>\r\n            <Link to={`/create`} id=\"Gato\">Crear gato</Link>\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Creator } from '../Creator/Creator';\r\nimport { Intro } from '../Intro/Intro';\r\n\r\nconst initialProps = [\r\n    {\r\n        attribute: \"fur\",\r\n        type: \"blank\",\r\n        color: \"#ffffff\",\r\n    },\r\n    {\r\n        attribute: \"eyes\",\r\n        type: \"expanded\",\r\n        color: \"#ffffff\",\r\n    },\r\n    {\r\n        attribute: \"necklace\",\r\n        type: \"blank\",\r\n        color: \"#ffffff\",\r\n    },\r\n    {\r\n        attribute: \"hat\",\r\n        type: \"blank\",\r\n        color: \"#ffffff\",\r\n    },\r\n    /*{\r\n        attribute: \"scene\",\r\n        type: \"blank\",\r\n        filter: \"none\",\r\n    },*/\r\n]\r\n\r\nconst initialAttributes = [\r\n    {\r\n        id: 0,\r\n        attribute: \"fur\",\r\n        checked: true,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"lines\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"colorAndwhite\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"siamese\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 4,\r\n                value: \"tricolor\",\r\n                checked: false\r\n            }\r\n        ],\r\n\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 1,\r\n        attribute: \"eyes\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"expanded\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"normal\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 2,\r\n                value: \"contracted\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        attribute: \"necklace\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"round\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"heart\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 3,\r\n                value: \"ribbon\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 3,\r\n        attribute: \"hat\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"party\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    }/*,\r\n    {\r\n        id: 4,\r\n        attribute: \"scene\",\r\n        checked: false\r\n    }*/\r\n]\r\n\r\nexport const App = () => {\r\n    const [catProps, setCatProps] = useState(initialProps);\r\n    const [attributeList, setAttributeList] = useState(initialAttributes);\r\n    const [currentAttribute, setCurrentAttribute] = useState(\"fur\");\r\n\r\n    const handleCurrentAttribute = (newCurrentAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        copy.forEach(e => {\r\n            if (e.attribute === newCurrentAttribute) {\r\n                e.checked = true;\r\n            } else e.checked = false;\r\n        })\r\n        setAttributeList(copy);\r\n        setCurrentAttribute(newCurrentAttribute);\r\n    }\r\n\r\n    const handleAttributeType = (newType: string) => {\r\n        const catPropsCopy = catProps.slice();\r\n        const catIndex = catPropsCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        });\r\n        catPropsCopy[catIndex].type = newType;\r\n\r\n        const attributeListCopy = attributeList.slice();\r\n        const attributeIndex = attributeListCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        })\r\n\r\n        attributeListCopy[attributeIndex].itemList.forEach(elem => {\r\n            if (elem.value === catPropsCopy[catIndex].type) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(attributeListCopy);\r\n    }\r\n\r\n    const handleAttributeColor = (newColor: string) => {\r\n        const catPropsCopy = catProps.slice();\r\n        const catIndex = catPropsCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        });\r\n\r\n        catPropsCopy[catIndex].color = newColor;\r\n\r\n        const attributeListCopy = attributeList.slice();\r\n        const attributeIndex = attributeListCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        })\r\n\r\n        attributeListCopy[attributeIndex].colorList.forEach(elem => {\r\n            if (elem.value === catPropsCopy[catIndex].color) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(attributeListCopy);\r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <Route path=\"/\" render={() => <Intro></Intro>} exact />\r\n                <Route path=\"/create\" render={() =>\r\n                    <Creator catProps={catProps} attributeList={attributeList} currentAttribute={currentAttribute} onEditAttributeType={handleAttributeType} onEditAttributeColor={handleAttributeColor} onChangeCurrentAttribute={handleCurrentAttribute} />}\r\n                />\r\n\r\n            </HashRouter>\r\n        </main>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}