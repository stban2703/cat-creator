{"version":3,"sources":["utils/getImageSrcFromUrl.ts","components/AttributeItem/AttributeItem.tsx","components/AttributeSelection/AttributeSelection.tsx","components/AttributeColorSection/AttributeColorSection.tsx","utils/lightenDarkColor.ts","components/AttributeTypeItem/AttributeTypeItem.tsx","components/AttributeTypeSection/AttributeTypeSection.tsx","components/AttributeOptions/AttributeOptions.tsx","utils/getTitleFromAttribute.ts","utils/getSubtitleFromAttribute.ts","utils/getColorListFromAttribute.ts","components/CatControl/CatControl.tsx","components/EditPanel/EditPanel.tsx","containers/App/initialCatProps.ts","containers/App/initialAttributeOptions.ts","utils/svgSelectors.ts","components/CatView/CatView.tsx","utils/handleCamera.ts","components/EditView/EditView.tsx","containers/Creator/Creator.tsx","containers/Intro/Intro.tsx","components/CatItem/CatItem.tsx","containers/CreatedCats/CreatedCats.tsx","containers/App/App.tsx","index.tsx"],"names":["baseUrl","process","getImageSrcFromUrl","url","includes","AttributeItem","value","checked","onChangeCurrentAttribute","imageSrc","className","onClick","src","alt","AttributeSelection","attributeOptions","map","id","AttributeColorSection","colorList","onEditAttributeColor","useState","color","setColor","onChange","hex","colorStroke","amt","usePound","slice","num","parseInt","r","b","g","toString","lightenDarkenColor","colors","AttributeTypeItem","onEditAttributeType","checkedSrc","AttributeTypeSection","itemList","subtitle","itemId","AttributeOptions","currentAttribute","title","attribute","getTitleFromAttribute","getSubtitleFromAttribute","getColorListFromAttribute","CatControl","catProps","onEditCatName","onSaveCat","useParams","history","useHistory","type","name","catName","placeholder","event","target","autoComplete","push","to","EditPanel","newAttribute","index","findIndex","elem","getItemListFromId","initialCatProps","creationDate","Date","now","settings","fill","stroke","initialAttributeOptions","svgSelectors","CatView","catFurProps","catEyesProps","shadowSelector","furOnlyStrokeSelector","furFillAndStrokeSelector","eyesFillSelector","linesPatternSelector","colorAndWhitePatternSelector","siamesePatternSelector","tricolorYellowSelector","tricolorBlackSelector","pupilContractedSelector","pupilNormalSelector","pupilExpandedSelector","camera","handleCamera","path","selector","display","fill-opacity","EditView","Creator","catList","setCatProps","setCurrentAttribute","setAttributeOptions","useEffect","catPropsElem","find","JSON","parse","stringify","newName","catCopy","newType","catSettingsCopy","catSettingsIndex","attributeOptionsCopy","attributeOptionsIndex","itemListCopy","forEach","colorFill","newCurrentAttribute","copy","e","Intro","CatItem","toLocaleDateString","toLocaleTimeString","CreatedCats","App","setCatList","handleSaveCat","catListCopy","catIndex","newCat","Math","round","random","basename","exact","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe423bdc.chunk.js","sourcesContent":["const baseUrl = `${process.env.PUBLIC_URL}/images/`\r\n\r\nexport const getImageSrcFromUrl = (url: string) => {\r\n    if (url.includes(\"blank\")) {\r\n        return undefined;\r\n    } else return `${baseUrl}${url}.svg`;\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeItem.css'\r\n\r\ninterface AttributeItemProps {\r\n    value: string;\r\n    url: string;\r\n    checked: boolean;\r\n    onChangeCurrentAttribute: () => void;\r\n}\r\n\r\nexport const AttributeItem:React.FC<AttributeItemProps> = ({ value, url, checked, onChangeCurrentAttribute }) => {\r\n    const imageSrc = getImageSrcFromUrl(url)\r\n\r\n    return(\r\n        <div className={`AttributeItem${checked ? \" AttributeItem--selected\" : \"\"}`} onClick={onChangeCurrentAttribute}>\r\n            <img className={`AttributeItem__image`} src={imageSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeItem } from '../AttributeItem/AttributeItem';\r\nimport './AttributeSelection.css';\r\n\r\ninterface AttributeSelectionProps {\r\n    attributeOptions: AttributeOptionType[];\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const AttributeSelection: React.FC<AttributeSelectionProps> = ({ attributeOptions, onChangeCurrentAttribute }) => {\r\n    return (\r\n        <section className=\"AttributeSelection\">\r\n            {attributeOptions.map(({ id, url, checked }) => {\r\n                const intermediateChangeAttribute = () => {\r\n                    onChangeCurrentAttribute(id)\r\n                }\r\n                return <AttributeItem key={id} value={id} url={url} checked={checked} onChangeCurrentAttribute={intermediateChangeAttribute}/>\r\n            })}\r\n        </section>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { ColorResult, TwitterPicker } from 'react-color';\r\nimport { lightenDarkenColor } from '../../utils/lightenDarkColor';\r\nimport './AttributeColorSection.css';\r\n\r\ninterface AttributeColorSectionProps {\r\n    colorList: string[];\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n}\r\n\r\nexport const AttributeColorSection: React.FC<AttributeColorSectionProps> = ({ colorList, onEditAttributeColor }) => {\r\n    const [color, setColor] = useState(\"#FFFFFF\");\r\n    const handleColor = (color: ColorResult) => {\r\n        setColor(color.hex);\r\n        const colorStroke = lightenDarkenColor(color.hex, -80);\r\n        onEditAttributeColor(color.hex, colorStroke)\r\n    };\r\n    // Original list: ['#FFFFFF', '#EBEBEB', '#ABB8C3', '#000000', '#0BF86A', '#8ED1FC', '#FF6900', '#FCB900', '#EB144C', '#F78DA7', '#9900EF']\r\n    return (\r\n        <section className=\"AttributeColorSection\">\r\n            <h3 className=\"AttributeColorSection__title\">Color</h3>\r\n            <TwitterPicker color={color} onChange={handleColor} colors={colorList} />\r\n        </section>\r\n    )\r\n}","export const lightenDarkenColor = (color: string, amt: number) => {\r\n    // https://css-tricks.com/snippets/javascript/lighten-darken-color/\r\n    let usePound = false;\r\n    if (color[0] === \"#\") {\r\n        color = color.slice(1);\r\n        usePound = true;\r\n    }\r\n    let num = parseInt(color, 16);\r\n    let r = (num >> 16) + amt;\r\n    if (r > 255) r = 255;\r\n    else if (r < 0) r = 0;\r\n    let b = ((num >> 8) & 0x00FF) + amt;\r\n    if (b > 255) b = 255;\r\n    else if (b < 0) b = 0;\r\n    let g = (num & 0x0000FF) + amt;\r\n    if (g > 255) g = 255;\r\n    else if (g < 0) g = 0;\r\n\r\n    // https://stackoverflow.com/questions/12043187/how-to-check-if-hex-color-is-too-black\r\n    let luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n\r\n    if (luma < 30) {\r\n        let num = parseInt(color, 16);\r\n        let r = (num >> 16) + 80;\r\n        if (r > 255) r = 255;\r\n        else if (r < 0) r = 0;\r\n        let b = ((num >> 8) & 0x00FF) + 80;\r\n        if (b > 255) b = 255;\r\n        else if (b < 0) b = 0;\r\n        let g = (num & 0x0000FF) + 80;\r\n        if (g > 255) g = 255;\r\n        else if (g < 0) g = 0;\r\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n    }\r\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeTypeItem.css';\r\n\r\ninterface AttributeTypeItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    url: string;\r\n    onEditAttributeType: () => void;\r\n}\r\n\r\nexport const AttributeTypeItem: React.FC<AttributeTypeItemProps> = ({ value, url, checked, onEditAttributeType }) => {\r\n    const imageSrc = getImageSrcFromUrl(url);\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n\r\n    return (\r\n        <div className=\"AttributeTypeItem\" onClick={onEditAttributeType}>\r\n            <img className=\"AttributeTypeItem__image\" src={imageSrc} alt=\"\" />\r\n            <img className={`AttributeTypeItem__check${checked ? '' : ' AttributeTypeItem__check--remove'}`} src={checkedSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeTypeItem } from '../AttributeTypeItem/AttributeTypeItem';\r\nimport './AttributeTypeSection.css';\r\n\r\ninterface AttributeTypeSectionProps {\r\n    itemList: { itemId: number, value: string, url: string, checked: boolean }[];\r\n    subtitle: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n}\r\n\r\nexport const AttributeTypeSection: React.FC<AttributeTypeSectionProps> = ({ itemList, subtitle, onEditAttributeType }) => {\r\n    return (\r\n        <section className=\"AttributeTypeSection\">\r\n            <h3 className=\"AttributeTypeSection__title\">{subtitle}</h3>\r\n            <div className=\"AttributeTypeSection__items\">\r\n                {itemList.map(({ itemId, value, url, checked }) => {\r\n                    const intermediateEditType = () => {\r\n                        onEditAttributeType(value);\r\n                    }\r\n                    return <AttributeTypeItem key={itemId} value={value} url={url} checked={checked} onEditAttributeType={intermediateEditType} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getColorListFromAttribute } from '../../utils/getColorListFromAttribute';\r\nimport { getSubtitleFromAttribute } from '../../utils/getSubtitleFromAttribute';\r\nimport { getTitleFromAttribute } from '../../utils/getTitleFromAttribute';\r\nimport { TypeItemType } from '../../utils/TypeItemType';\r\nimport { AttributeColorSection } from '../AttributeColorSection/AttributeColorSection';\r\nimport { AttributeTypeSection } from '../AttributeTypeSection/AttributeTypeSection';\r\nimport \"./AttributeOptions.css\";\r\n\r\ninterface AttributeOptionsProps {\r\n    currentAttribute: string;\r\n    itemList: TypeItemType[];\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n}\r\n\r\nexport const AttributeOptions: React.FC<AttributeOptionsProps> = ({ currentAttribute, itemList, onEditAttributeType, onEditAttributeColor }) => {\r\n    const title = getTitleFromAttribute(currentAttribute);\r\n    const subtitle = getSubtitleFromAttribute(currentAttribute);\r\n    const colorList = getColorListFromAttribute(currentAttribute);\r\n\r\n    switch (currentAttribute) {\r\n        case \"scene\":\r\n            return (\r\n                <section className=\"AttributeOptions\">\r\n                    <h2 className=\"AttributeOptions__title\">{title}</h2>\r\n\r\n                </section>\r\n            )\r\n\r\n        default:\r\n            return (\r\n                <section className=\"AttributeOptions\">\r\n                    <h2 className=\"AttributeOptions__title\">{title}</h2>\r\n                    <AttributeTypeSection itemList={itemList} subtitle={subtitle!} onEditAttributeType={onEditAttributeType} />\r\n                    <AttributeColorSection colorList={colorList} onEditAttributeColor={onEditAttributeColor} />\r\n                </section>\r\n            )\r\n    }\r\n}","export const getTitleFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return \"Pelaje\";\r\n\r\n        case \"eyes\":\r\n            return \"Ojos\";\r\n\r\n        case \"necklace\":\r\n            return \"Collar\";\r\n\r\n        case \"hat\":\r\n            return \"Sombrero\";\r\n\r\n        case \"scene\":\r\n            return \"Escenario\";\r\n    }\r\n}","export const getSubtitleFromAttribute = (currentAttribute: string) => {\r\n    switch (currentAttribute) {\r\n        case \"fur\":\r\n            return \"Patrón\"\r\n        case \"eyes\":\r\n            return \"Pupila\"\r\n        case \"necklace\":\r\n            return \"Accesorio\"\r\n        case \"hat\":\r\n            return \"Tipo\"\r\n    }\r\n}","export const getColorListFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return [\r\n                '#FFFFFF',\r\n                '#EBEBEB',\r\n                '#ABB8C3',\r\n                '#8ED1FC',\r\n                '#EA9142',\r\n                '#D4A113',\r\n                '#F78DA7',\r\n                '#000000'\r\n            ]\r\n        case \"eyes\":\r\n        default:\r\n            return [\r\n                '#ABB8C3',\r\n                '#000000',\r\n                '#0BF86A',\r\n                '#05F0FF',\r\n                '#FF6900',\r\n                '#FCB900',\r\n                '#EB144C',\r\n                '#F78DA7',\r\n                '#9900EF'\r\n            ]\r\n    }\r\n}","import React from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport './CatControl.css';\r\n\r\ninterface CatControlProps {\r\n    catProps: CatPropsType;\r\n    attributeOptions: AttributeOptionType[];\r\n    onEditCatName: (newName: string) => void;\r\n    onSaveCat: (id: string, elem: CatPropsType) => void;\r\n}\r\n\r\nexport const CatControl: React.FC<CatControlProps> = ({ catProps, onEditCatName, onSaveCat }) => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n    const handleTextChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        onEditCatName(event.target.value);\r\n    }\r\n    const intermediateSaveCat = () => {\r\n        onSaveCat(id, catProps);\r\n        history.push(\"/cats/\");\r\n    }\r\n    return (\r\n        <section className=\"CatControl\">\r\n            <input className=\"CatControl__input\" type=\"text\" name=\"catName\" value={catProps.catName} placeholder=\"Escribe el nombre de tu gato\" onChange={handleTextChange} autoComplete=\"off\" />\r\n            <div className=\"CatControl__options\">\r\n                <div className=\"CatControl__section\">\r\n                    <button className=\"CatControl__btn CatControl__btn--green\" onClick={intermediateSaveCat} >\r\n                        Guardar\r\n                    </button>\r\n                </div>\r\n                <div className=\"CatControl__section\">\r\n                    <Link className=\"CatControl__btn CatControl__btn--navegate\" to={'/cats/'}>\r\n                        Ver creados\r\n                    </Link>\r\n                    <Link className=\"CatControl__btn CatControl__btn--exit\" to={'/'}>\r\n                        Salir\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeSelection } from '../AttributeSelection/AttributeSelection';\r\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\r\nimport './EditPanel.css';\r\nimport { CatControl } from '../CatControl/CatControl';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\n\r\ninterface EditPanelProps {\r\n    catProps: CatPropsType;\r\n    attributeOptions: AttributeOptionType[];\r\n    currentAttribute: string;\r\n    onEditCatName: (newName: string) => void;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (colorFill: string, colorStroke: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n    onSaveCat: (id: string, elem: CatPropsType) => void;\r\n}\r\n\r\nexport const EditPanel: React.FC<EditPanelProps> = ({ catProps, attributeOptions, currentAttribute, onEditCatName, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute, onSaveCat }) => {\r\n\r\n    const getItemListFromId = (newAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.id === newAttribute;\r\n        })\r\n        const newItemList = attributeOptions[index].itemList;\r\n        return newItemList;\r\n    };\r\n\r\n    const itemList = getItemListFromId(currentAttribute);\r\n\r\n    return (\r\n        <article className=\"EditPanel\">\r\n            <AttributeSelection attributeOptions={attributeOptions} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n            <AttributeOptions currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} itemList={itemList} />\r\n            <CatControl catProps={catProps} attributeOptions={attributeOptions} onEditCatName={onEditCatName} onSaveCat={onSaveCat} />\r\n        </article>\r\n    )\r\n}","export const initialCatProps = {\r\n    id: \"new\",\r\n    catName: \"\",\r\n    creationDate: Date.now(),\r\n    settings: [\r\n        {\r\n            id: \"fur\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            stroke: \"#AFAFAF\"\r\n        },\r\n        {\r\n            id: \"eyes\",\r\n            type: \"expanded\",\r\n            fill: \"#0BF86A\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"necklace\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"hat\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            stroke: \"none\"\r\n        },\r\n    ]\r\n}","export const initialAttributeOptions = [\r\n    {\r\n        id: \"fur\",\r\n        url: \"attributes/fur\",\r\n        checked: true,\r\n        itemList: [\r\n            {\r\n                itemId: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true,\r\n            },\r\n            {\r\n                itemId: 1,\r\n                value: \"lines\",\r\n                url: \"items/lines\",\r\n                checked: false,\r\n            },\r\n            {\r\n                itemId: 2,\r\n                value: \"colorAndWhite\",\r\n                url: \"items/colorAndWhite\",\r\n                checked: false,\r\n            },\r\n            {\r\n                itemId: 3,\r\n                value: \"siamese\",\r\n                url: \"items/siamese\",\r\n                checked: false,\r\n            },\r\n            {\r\n                itemId: 4,\r\n                value: \"tricolor\",\r\n                url: \"items/tricolor\",\r\n                checked: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"eyes\",\r\n        url: \"attributes/eyes\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                itemId: 0,\r\n                value: \"expanded\",\r\n                url: \"items/expanded\",\r\n                checked: true\r\n            },\r\n            {\r\n                itemId: 1,\r\n                value: \"normal\",\r\n                url: \"items/normal\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                itemId: 2,\r\n                value: \"contracted\",\r\n                url: \"items/contracted\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"necklace\",\r\n        url: \"attributes/necklace\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                itemId: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                itemId: 1,\r\n                value: \"round\",\r\n                url: \"items/round\",\r\n                checked: false\r\n            },\r\n            {\r\n                itemId: 2,\r\n                value: \"heart\",\r\n                url: \"items/heart\",\r\n                checked: false\r\n            },\r\n            {\r\n                itemId: 3,\r\n                value: \"ribbon\",\r\n                url: \"items/ribbon\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"hat\",\r\n        url: \"attributes/hat\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                itemId: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                itemId: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                itemId: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: \"scene\",\r\n        url: \"attributes/scene\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                itemId: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                itemId: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                itemId: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n    }\r\n];","export const svgSelectors = {\r\n    shadow: \"#tail-shadow, #paw-left-shadow, #paw-right-shadow, #body-back-shadow, #body-front-shadow, #neck-shadow, #paws-front-left-shadow, #paws-front-right-shadow, #ear-left-outside-shadow, #ear-left-inside-shadow, #ear-right-inside-shadow, #head-shadow-left\",\r\n    furOnlyStroke:\"#eye-left-shadow, #eye-right-shadow, #mouth, #whisker-left-1, #whisker-left-2, #whisker-left-3, #whisker-right-1, #whisker-right-2, #whisker-right-3\",\r\n    furFillAndStroke:\"#head, #ear-left-outside, #ear-right-outside, #body-front, #body-back, #paw-left, #paw-right, #tail\",\r\n    eyesFill:\"#eye-left-color, #eye-right-color\",\r\n    linesPattern:\"#tail-linePattern00, #tail-linePattern01, #tail-linePattern02, #tail-linePattern03, #tail-linePattern04, #tail-linePattern05, #body-back-linePattern00, #body-back-linePattern01, #body-back-linePattern02, #body-back-linePattern03, #body-back-linePattern04, #body-back-linePattern05, #body-back-linePattern06, #body-back-linePattern07, #body-front-linePattern00, #body-front-linePattern01, #body-front-linePattern02, #body-front-linePattern03, #body-front-linePattern04, #body-front-linePattern05, #body-front-linePattern06, #body-front-linePattern07, #body-front-linePattern08, #body-front-linePattern09, #body-front-linePattern10, #body-front-linePattern11, #body-front-linePattern12, #body-front-linePattern13, #body-front-linePattern14, #body-front-linePattern15, #body-front-linePattern16, #head-linePattern00, #head-linePattern01, #head-linePattern02, #head-linePattern03, #head-linePattern04, #head-linePattern05, #head-linePattern06, #head-linePattern07, #head-linePattern08, #ear-left-linePattern, #ear-right-linePattern\",\r\n    colorAndWhitePattern: \"#tail-cwPattern, #paw-left-back-cwPattern, #paw-right-back-cwPattern, #paw-front-left-cwPattern, #paw-front-right-cwPattern, #body-front-cwPattern, #body-back-cwPattern, #head-cwPattern\",\r\n    siamesePattern: \"#tail-siamesePattern, #paw-left-back-siamesePattern, #paw-right-back-siamesePattern, #leg-front-left-siamesePattern, #leg-front-right-siamesePattern, #ear-left-siamesePattern, #ear-right-siamesePattern, #head-siamesePattern\",\r\n    tricolorPatternYellow: \"#tail-tricolorPattern00, #tail-tricolorPattern01, #tail-tricolorPattern02, #back-left-tricolorPattern, #back-right-tricolorPattern, #body-front-tricolorPattern00, #body-front-tricolorPattern01, #ear-left-outside-tricolorPattern, #head-tricolorPattern00, #head-tricolorPattern01\",\r\n    tricolorPatternBlack: \"#tail-tricolorPattern-black00, #tail-tricolorPattern-black01, #tail-tricolorPattern-black02, #tail-tricolorPattern-black03, #back-left-tricolorPattern-black, #back-right-tricolorPattern-black, #body-front-tricolorPattern-black00, #body-front-tricolorPattern-black01, #ear-right-outside-tricolorPattern-black, #head-tricolorPattern-black\",\r\n    pupilContracted: \".pupil-contracted\",\r\n    pupilNormal: \".pupil-normal\",\r\n    pupilExpanded: \".pupil-expanded\"\r\n}","import React from 'react';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { SvgLoader, SvgProxy } from \"react-svgmt\";\r\nimport './CatView.css';\r\nimport { svgSelectors } from '../../utils/svgSelectors';\r\nimport { handleCamera } from '../../utils/handleCamera';\r\n\r\ninterface CatViewProps {\r\n    catProps: CatPropsType;\r\n    currentAttribute: string;\r\n}\r\n\r\nexport const CatView: React.FC<CatViewProps> = ({ catProps, currentAttribute }) => {\r\n    const catFurProps = catProps.settings[0];\r\n    const catEyesProps = catProps.settings[1];\r\n    const shadowSelector = svgSelectors.shadow;\r\n    const furOnlyStrokeSelector = svgSelectors.furOnlyStroke;\r\n    const furFillAndStrokeSelector = svgSelectors.furFillAndStroke;\r\n    const eyesFillSelector = svgSelectors.eyesFill;\r\n    const linesPatternSelector = svgSelectors.linesPattern;\r\n    const colorAndWhitePatternSelector = svgSelectors.colorAndWhitePattern;\r\n    const siamesePatternSelector = svgSelectors.siamesePattern;\r\n    const tricolorYellowSelector = svgSelectors.tricolorPatternYellow;\r\n    const tricolorBlackSelector = svgSelectors.tricolorPatternBlack;\r\n    const pupilContractedSelector = svgSelectors.pupilContracted;\r\n    const pupilNormalSelector = svgSelectors.pupilNormal;\r\n    const pupilExpandedSelector = svgSelectors.pupilExpanded;\r\n    const camera = handleCamera(currentAttribute);\r\n\r\n    return (\r\n        <SvgLoader className={`CatView ${camera}`} path={`${process.env.PUBLIC_URL}/images/render/catrender.svg`}>\r\n            <SvgProxy selector={eyesFillSelector} fill={catEyesProps.fill} />\r\n            <SvgProxy selector={furOnlyStrokeSelector} fill={catFurProps.stroke} />\r\n            <SvgProxy selector={furFillAndStrokeSelector} fill={catFurProps.fill} stroke={catFurProps.stroke} />\r\n            <SvgProxy selector={linesPatternSelector} fill={catFurProps.stroke} display={catFurProps.type === \"lines\" ? \"visible\" : \"none\"} />\r\n            <SvgProxy selector={\"#ear-left-linePattern, #ear-right-linePattern\"} stroke={catFurProps.type === \"lines\" ? \"rgba(0, 0, 0, 0.1)\" : catFurProps.stroke} />\r\n            <SvgProxy selector={colorAndWhitePatternSelector} display={catFurProps.type === \"colorAndWhite\" ? \"visible\" : \"none\"} fill={catFurProps.fill === \"#ffffff\" ? \"lightGray\" : \"#FFFFFF\"} />\r\n            <SvgProxy selector={siamesePatternSelector} fill={\"#4B3636\"} display={catFurProps.type === \"siamese\" ? \"visible\" : \"none\"} stroke={catFurProps.stroke} />\r\n            <SvgProxy selector={furOnlyStrokeSelector} fill={catFurProps.type === \"siamese\" ? \"#000000\" : catFurProps.stroke} />\r\n            <SvgProxy selector={\"#nose, #ear-left-inside, #ear-right-inside\"} fill={catFurProps.type === \"siamese\" ? \"#000000\" : \"#FFC3F9\"} />\r\n            <SvgProxy selector={shadowSelector} fill-opacity={catFurProps.type === \"siamese\" ? \"0.25\" : \"0.1\"} />\r\n            <SvgProxy selector={tricolorYellowSelector + \", \" + tricolorBlackSelector} display={catFurProps.type === \"tricolor\" ? \"visible\" : \"none\"} />\r\n            <SvgProxy selector={tricolorBlackSelector} fill={catFurProps.fill === \"#000000\" ? \"#E9B388\" : \"#000000\"} />\r\n            <SvgProxy selector={tricolorYellowSelector} fill={catFurProps.fill === \"#000000\" ? \"#FFFFFF\" : \"#E9B388\"} />\r\n            <SvgProxy selector={\"#ear-left-inside, #ear-right-inside\"} fill={catFurProps.type === \"tricolor\" ? \"darkGray\" : \"#FFC3F9\"} />\r\n            <SvgProxy selector={pupilContractedSelector} display={catEyesProps.type === \"contracted\" ? \"visible\" : \"none\"} />\r\n            <SvgProxy selector={pupilNormalSelector} display={catEyesProps.type === \"normal\" ? \"visible\" : \"none\"} />\r\n            <SvgProxy selector={pupilExpandedSelector} display={catEyesProps.type === \"expanded\" ? \"visible\" : \"none\"} />\r\n        </SvgLoader>\r\n    )\r\n}","export const handleCamera = (currentAttribute: string) => {\r\n    switch (currentAttribute) {\r\n        default:\r\n            return \"\";\r\n        case \"eyes\":\r\n            return \"CatView--eyes\";\r\n        case \"necklace\":\r\n            return \"CatView--necklace\"\r\n        case \"hat\":\r\n            return \"CatView--hat\"\r\n    }\r\n}","import React from 'react';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { CatView } from '../CatView/CatView';\r\nimport './EditView.css';\r\n\r\ninterface EditViewProps {\r\n    catProps: CatPropsType;\r\n    currentAttribute: string;\r\n}\r\n\r\nexport const EditView: React.FC<EditViewProps> = ({ catProps, currentAttribute }) => {\r\n    return (\r\n        <div className=\"EditView\">\r\n            <CatView catProps={catProps} currentAttribute={currentAttribute} />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { EditPanel } from '../../components/EditPanel/EditPanel';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport './Creator.css';\r\nimport { useParams } from 'react-router';\r\nimport { initialCatProps } from '../App/initialCatProps';\r\nimport { initialAttributeOptions } from '../App/initialAttributeOptions';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { EditView } from '../../components/EditView/EditView';\r\n\r\ninterface CreatorProps {\r\n    catList: CatPropsType[];\r\n    onSaveCat: (id: string, elem: CatPropsType) => void;\r\n}\r\n\r\nexport const Creator: React.FC<CreatorProps> = ({ catList, onSaveCat }) => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [catProps, setCatProps] = useState(initialCatProps);\r\n    const [currentAttribute, setCurrentAttribute] = useState(\"fur\");\r\n    const [attributeOptions, setAttributeOptions] = useState<AttributeOptionType[]>(initialAttributeOptions);\r\n\r\n    useEffect(() => {\r\n        const catPropsElem = catList.find((elem) => {\r\n            return elem.id === id;\r\n        });\r\n        if (catPropsElem) {\r\n            setCatProps(catPropsElem);\r\n            //console.log(catPropsElem)\r\n        } else {\r\n            setCatProps(JSON.parse(JSON.stringify(initialCatProps)));\r\n            //console.log(initialCatProps)\r\n        }\r\n        setCurrentAttribute(\"fur\");\r\n        setAttributeOptions(JSON.parse(JSON.stringify(initialAttributeOptions)));\r\n        //console.log(id)\r\n    }, [id, catList]);\r\n\r\n    const handleCatName = (newName: string) => {\r\n        const catCopy = { ...catProps! }\r\n        catCopy.catName = newName;\r\n        setCatProps(catCopy);\r\n    }\r\n\r\n    const handleCurrentAttribute = (newCurrentAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        copy.forEach(e => {\r\n            if (e.id === newCurrentAttribute) {\r\n                e.checked = true;\r\n            } else e.checked = false;\r\n        })\r\n        setAttributeOptions(copy);\r\n        setCurrentAttribute(newCurrentAttribute);\r\n    }\r\n\r\n    const handleAttributeType = (newType: string) => {\r\n        const catCopy = { ...catProps! };\r\n        const catSettingsCopy = [...catCopy.settings];\r\n\r\n        const catSettingsIndex = catSettingsCopy.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catSettingsCopy[catSettingsIndex].type = newType;\r\n        catCopy.settings = catSettingsCopy;\r\n\r\n        const attributeOptionsCopy = attributeOptions.slice();\r\n        const attributeOptionsIndex = attributeOptionsCopy.findIndex(elem => {\r\n            return elem.id === currentAttribute;\r\n        })\r\n        const itemListCopy = attributeOptionsCopy[attributeOptionsIndex].itemList;\r\n\r\n        itemListCopy.forEach(elem => {\r\n            if (elem.value === catSettingsCopy[catSettingsIndex].type) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n        attributeOptionsCopy[attributeOptionsIndex].itemList = itemListCopy;\r\n        setCatProps(catCopy)\r\n        setAttributeOptions(attributeOptionsCopy);\r\n    }\r\n\r\n    const handleAttributeColor = (colorFill: string, colorStroke: string) => {\r\n        const catCopy = { ...catProps! };\r\n        const catSettingsCopy = [...catCopy.settings];\r\n        const catSettingsIndex = catSettingsCopy.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n        catSettingsCopy[catSettingsIndex].fill = colorFill;\r\n        catSettingsCopy[catSettingsIndex].stroke = colorStroke;\r\n        catCopy.settings = catSettingsCopy;\r\n        setCatProps(catCopy);\r\n    }\r\n\r\n    return (\r\n        <article className=\"Creator\">\r\n            <EditView catProps={catProps!} currentAttribute={currentAttribute} />\r\n            <EditPanel catProps={catProps!} onEditCatName={handleCatName} attributeOptions={attributeOptions} currentAttribute={currentAttribute} onEditAttributeType={handleAttributeType} onEditAttributeColor={handleAttributeColor} onChangeCurrentAttribute={handleCurrentAttribute} onSaveCat={onSaveCat} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Intro.css'\r\n\r\ninterface IntroProps {\r\n\r\n}\r\n\r\nexport const Intro: React.FC<IntroProps> = () => {\r\n    return (\r\n        <article className=\"Intro\">\r\n            <section className=\"Intro__container\">\r\n                <h1 className=\"Intro__title\" >Cat creator</h1>\r\n                <section className=\"Intro__controls\">\r\n                    <Link className=\"Intro__btn\" to={`/create/new`}>Crear un gato</Link>\r\n                    <Link className=\"Intro__btn Intro__btn--gray\" to={`/cats/`}>Ver creados</Link>\r\n                </section>\r\n            </section>\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport \"./CatItem.css\";\r\nimport { CatView } from '../CatView/CatView';\r\nimport { Link } from 'react-router-dom';\r\n//import { CatPropsType } from '../../utils/CatPropsType';\r\n\r\ninterface CatItemProps {\r\n    catProps: CatPropsType;\r\n}\r\n\r\nexport const CatItem: React.FC<CatItemProps> = ({ catProps }) => {\r\n    return (\r\n        <Link to={`/create/${catProps.id}`} className=\"CatItem\">\r\n            <div className=\"CatItem__preview\">\r\n                <CatView catProps={catProps} currentAttribute={\"fur\"} />\r\n            </div>\r\n            <div className=\"CatItem__info\">\r\n                <h3>Nombre: {catProps.catName}</h3>\r\n                <p><strong>Id:</strong> {catProps.id}</p>\r\n                <p><strong>Fecha:</strong> {new Date(catProps.creationDate).toLocaleDateString(\"es-ES\")}</p>\r\n                <p><strong>Hora:</strong> {new Date(catProps.creationDate).toLocaleTimeString(\"es-ES\")}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CatItem } from '../../components/CatItem/CatItem';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport \"./CreatedCats.css\";\r\n\r\ninterface CreatedCatsProps {\r\n    catList: CatPropsType[];\r\n}\r\n\r\nexport const CreatedCats: React.FC<CreatedCatsProps> = ({ catList }) => {\r\n    return (\r\n        <article className=\"CreatedCats\" >\r\n            <h2 className=\"CreatedCats__title\">Gatos creados</h2>\r\n            <Link className=\"CreatedCats__newBtn\" to={`/create/new`}>Crear otro</Link>\r\n            <ul className=\"CreatedCats__container\">\r\n                {catList.map((elem) => {\r\n                    return <CatItem key={elem.id} catProps={elem} /> \r\n                })}\r\n            </ul>\r\n        </article>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Creator } from '../Creator/Creator';\r\nimport { Intro } from '../Intro/Intro';\r\nimport './App.css';\r\nimport { CreatedCats } from '../CreatedCats/CreatedCats';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\n\r\nexport const App = () => {\r\n    //useState<CatPropsType[]>\r\n    const [catList, setCatList] = useState<CatPropsType[]>([]);\r\n\r\n    const handleSaveCat = (id: string, elem: CatPropsType) => {\r\n        const catListCopy = [...catList];\r\n        const catIndex = catListCopy.findIndex((e) => {\r\n            return e.id === id;\r\n        })\r\n\r\n        if(catListCopy[catIndex]) {\r\n            //console.log(\"Ya existe\")\r\n            catListCopy[catIndex] = elem;\r\n            setCatList(catListCopy)\r\n        } else {\r\n            //console.log(\"No existe\")\r\n            const newCat = elem;\r\n            newCat.id = Math.round(Math.random() * (10000000000 - 1)).toString();\r\n            newCat.creationDate = Date.now();\r\n            catListCopy.push(newCat);\r\n            setCatList(catListCopy);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <Route path=\"/\" exact render={() => <Intro />} />\r\n                <Route path=\"/create/:id\" render={() =>\r\n                    <Creator catList={catList} onSaveCat={handleSaveCat} />}\r\n                />\r\n                <Route path=\"/cats/\" render={() => <CreatedCats catList={catList} />} />\r\n            </HashRouter>\r\n        </main>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}