{"version":3,"sources":["components/CatView/CatView.tsx","utils/getImageSrcFromUrl.ts","components/AttributeItem/AttributeItem.tsx","components/AttributeSelection/AttributeSelection.tsx","components/AttributeColorItem/AttributeColorItem.tsx","components/AttributeColorSection/AttributeColorSection.tsx","components/AttributeTypeItem/AttributeTypeItem.tsx","components/AttributeTypeSection/AttributeTypeSection.tsx","components/AttributeOptions/AttributeOptions.tsx","utils/getTitleFromAttribute.ts","components/EditPanel/EditPanel.tsx","containers/Creator/Creator.tsx","containers/App/initialCatProps.ts","containers/App/initialSettingsOptions.ts","containers/App/App.tsx","index.tsx"],"names":["CatView","catProps","currentAttribute","catFur","settings","catEyes","camera","setCamera","className","path","process","selector","fill","baseUrl","getImageSrcFromUrl","url","includes","AttributeItem","value","checked","onChangeCurrentAttribute","imageSrc","onClick","src","alt","AttributeSelection","attributeOptions","map","id","AttributeColorItem","onEditAttributeColor","checkedSrc","style","backgroundColor","AttributeColorSection","colorList","AttributeTypeItem","onEditAttributeType","AttributeTypeSection","itemList","AttributeOptions","title","attribute","getTitleFromAttribute","EditPanel","newAttribute","index","slice","findIndex","elem","getItemListFromId","getColorListFromId","Creator","initialCatProps","catName","creationDate","Date","now","type","shadow","stroke","initialAttributeOptions","App","useState","setCatProps","setAttributeList","setCurrentAttribute","handleCurrentAttribute","newCurrentAttribute","copy","forEach","e","handleAttributeType","newType","catPropsCopy","catSettingsIndex","settingsOptionsCopy","settingsOptionsIndex","handleAttributeColor","newColor","basename","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f91faac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { SvgLoader, SvgProxy } from \"react-svgmt\";\r\nimport './CatView.css';\r\n\r\ninterface CatViewProps {\r\n    catProps: CatPropsType;\r\n    currentAttribute: string;\r\n}\r\n\r\nexport const CatView: React.FC<CatViewProps> = ({ catProps, currentAttribute }) => {\r\n    const catFur = catProps.settings[0];\r\n    const catEyes = catProps.settings[1];\r\n\r\n    const setCamera = (currentAttribute: string) => {\r\n        switch (currentAttribute) {\r\n            case \"fur\":\r\n                return \"\";\r\n            case \"eyes\":\r\n                return \"CatView__model--eyes\";\r\n            case \"necklace\":\r\n                return \"CatView__model--necklace\"\r\n            case \"hat\":\r\n                return \"CatView__model--hat\"\r\n        }\r\n    }\r\n\r\n    const camera = setCamera(currentAttribute)\r\n\r\n    return (\r\n        <article className=\"CatView\">\r\n            <SvgLoader className={`CatView__model ${camera}`} path={`${process.env.PUBLIC_URL}/images/render/catsvg.svg`}>\r\n                <SvgProxy selector=\"#eye-left-color\" fill={catEyes.fill} />\r\n                <SvgProxy selector=\"#eye-right-color\" fill={catEyes.fill} />\r\n                <SvgProxy selector=\"#head\" fill={catFur.fill} />\r\n                <SvgProxy selector=\"#ear-left-outside\" fill={catFur.fill} />\r\n                <SvgProxy selector=\"#ear-right-outside\" fill={catFur.fill} />\r\n                <SvgProxy selector=\"#body-front\" fill={catFur.fill} />\r\n                <SvgProxy selector=\"#body-back\" fill={catFur.fill} />\r\n                <SvgProxy selector=\"#tail\" fill={catFur.fill} />\r\n            </SvgLoader>\r\n            {/*<h4>Atributo: {catProps[0].attribute} = Tipo: {catProps[0].type} y Color: {catProps[0].color}</h4>\r\n            <h4>Atributo: {catProps[1].attribute} = Tipo: {catProps[1].type} y Color: {catProps[1].color}</h4>\r\n            <h4>Atributo: {catProps[2].attribute} = Tipo: {catProps[2].type} y Color: {catProps[2].color}</h4>\r\n    <h4>Atributo: {catProps[3].attribute} = Tipo: {catProps[3].type} y Color: {catProps[3].color}</h4>*/}\r\n        </article>\r\n    )\r\n}","const baseUrl = `${process.env.PUBLIC_URL}/images/`\r\n\r\nexport const getImageSrcFromUrl = (url: string) => {\r\n    if (url.includes(\"blank\")) {\r\n        return undefined;\r\n    } else return `${baseUrl}${url}.svg`;\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeItem.css'\r\n\r\ninterface AttributeItemProps {\r\n    value: string;\r\n    url: string;\r\n    checked: boolean;\r\n    onChangeCurrentAttribute: () => void;\r\n}\r\n\r\nexport const AttributeItem:React.FC<AttributeItemProps> = ({ value, url, checked, onChangeCurrentAttribute }) => {\r\n    const imageSrc = getImageSrcFromUrl(url)\r\n\r\n    return(\r\n        <div className={`AttributeItem${checked ? \" AttributeItem--selected\" : \"\"}`} onClick={onChangeCurrentAttribute}>\r\n            <img className={`AttributeItem__image`} src={imageSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeItem } from '../AttributeItem/AttributeItem';\r\nimport './AttributeSelection.css';\r\n\r\ninterface AttributeSelectionProps {\r\n    attributeOptions: AttributeOptionType[];\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const AttributeSelection: React.FC<AttributeSelectionProps> = ({ attributeOptions, onChangeCurrentAttribute }) => {\r\n    return (\r\n        <section className=\"AttributeSelection\">\r\n            {attributeOptions.map(({ id, url, checked }) => {\r\n                const intermediateChangeAttribute = () => {\r\n                    onChangeCurrentAttribute(id)\r\n                }\r\n                return <AttributeItem key={id} value={id} url={url} checked={checked} onChangeCurrentAttribute={intermediateChangeAttribute}/>\r\n            })}\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeColorItem.css';\r\n\r\ninterface AttributeColorItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    onEditAttributeColor: () => void;\r\n}\r\n\r\nexport const AttributeColorItem: React.FC<AttributeColorItemProps> = ({ value, checked, onEditAttributeColor }) => {\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n    return (\r\n        <div className=\"AttributeColorItem\" style={ {backgroundColor: value} } onClick={onEditAttributeColor}>\r\n            <img className={`AttributeColorItem__check${checked ? '' : ' AttributeColorItem__check--remove'}`} src={checkedSrc} alt=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorItemType } from '../../utils/ColorItemType';\r\nimport { AttributeColorItem } from '../AttributeColorItem/AttributeColorItem';\r\nimport './AttributeColorSection.css';\r\n\r\ninterface AttributeColorSectionProps {\r\n    colorList: ColorItemType[];\r\n    onEditAttributeColor: (newColor: string) => void;\r\n}\r\n\r\nexport const AttributeColorSection: React.FC<AttributeColorSectionProps> = ({ colorList, onEditAttributeColor }) => {\r\n    return(\r\n        <section className=\"AttributeColorSection\">\r\n            <h3 className=\"AttributeColorSection__title\">Color</h3>\r\n            <div className=\"AttributeColorSection__items\">\r\n                {colorList.map(({ id, fill, checked}) => {\r\n                    const intermediateEditColor = () => {\r\n                        onEditAttributeColor(fill);\r\n                    }\r\n                    return <AttributeColorItem key={id} value={fill} checked={checked} onEditAttributeColor={intermediateEditColor} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeTypeItem.css';\r\n\r\ninterface AttributeTypeItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    url: string;\r\n    onEditAttributeType: () => void;\r\n}\r\n\r\nexport const AttributeTypeItem: React.FC<AttributeTypeItemProps> = ({ value, url, checked, onEditAttributeType }) => {\r\n    const imageSrc = getImageSrcFromUrl(url);\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n\r\n    return (\r\n        <div className=\"AttributeTypeItem\" onClick={onEditAttributeType}>\r\n            <img className=\"AttributeTypeItem__image\" src={imageSrc} alt=\"\" />\r\n            <img className={`AttributeTypeItem__check${checked ? '' : ' AttributeTypeItem__check--remove'}`} src={checkedSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeTypeItem } from '../AttributeTypeItem/AttributeTypeItem';\r\nimport './AttributeTypeSection.css';\r\n\r\ninterface AttributeTypeSectionProps {\r\n    itemList: { id: number, value: string, url: string, checked: boolean }[];\r\n    onEditAttributeType: (newType: string) => void;\r\n}\r\n\r\nexport const AttributeTypeSection: React.FC<AttributeTypeSectionProps> = ({ itemList, onEditAttributeType }) => {\r\n    return (\r\n        <section className=\"AttributeTypeSection\">\r\n            <h3 className=\"AttributeTypeSection__title\">Tipo</h3>\r\n            <div className=\"AttributeTypeSection__items\">\r\n                {itemList.map(({ id, value, url, checked }) => {\r\n                    const intermediateEditType = () => {\r\n                        onEditAttributeType(value);\r\n                    }\r\n                    return <AttributeTypeItem key={id} value={value} url={url} checked={checked} onEditAttributeType={intermediateEditType} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorItemType } from '../../utils/ColorItemType';\r\nimport { getTitleFromAttribute } from '../../utils/getTitleFromAttribute';\r\nimport { TypeItemType } from '../../utils/TypeItemType';\r\nimport { AttributeColorSection } from '../AttributeColorSection/AttributeColorSection';\r\nimport { AttributeTypeSection } from '../AttributeTypeSection/AttributeTypeSection';\r\nimport \"./AttributeOptions.css\";\r\n\r\ninterface AttributeOptionsProps {\r\n    currentAttribute: string;\r\n    itemList: TypeItemType[];\r\n    colorList: ColorItemType[];\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor:string) => void;\r\n}\r\n\r\nexport const AttributeOptions: React.FC<AttributeOptionsProps> = ({ currentAttribute, itemList, colorList, onEditAttributeType, onEditAttributeColor }) => {\r\n    //const typeListt = getTypeListByAttribute(currentAttribute);\r\n    const title = getTitleFromAttribute(currentAttribute);\r\n\r\n    return (\r\n        <section className=\"AttributeOptions\">\r\n            <h2 className=\"AttributeOptions__title\">{title}</h2>\r\n            <AttributeTypeSection itemList={itemList} onEditAttributeType={onEditAttributeType} />\r\n            <AttributeColorSection colorList={colorList} onEditAttributeColor={onEditAttributeColor} />\r\n        </section>\r\n    )\r\n}","export const getTitleFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return \"Pelaje\";\r\n\r\n        case \"eyes\":\r\n            return \"Ojos\";\r\n\r\n        case \"necklace\":\r\n            return \"Collar\";\r\n\r\n        case \"hat\":\r\n            return \"Sombrero\";\r\n\r\n        case \"scene\":\r\n            return \"Escenario\";\r\n    }\r\n}","import React from 'react';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport { AttributeSelection } from '../AttributeSelection/AttributeSelection';\r\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\r\nimport './EditPanel.css';\r\n\r\ninterface EditPanelProps {\r\n    attributeOptions: AttributeOptionType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const EditPanel: React.FC<EditPanelProps> = ({ attributeOptions, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    const getItemListFromId = (newAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.id === newAttribute;\r\n        })\r\n        const newItemList = attributeOptions[index].itemList;\r\n        return newItemList;\r\n    };\r\n\r\n    const getColorListFromId = (newAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.id === newAttribute;\r\n        })\r\n        const newColorList = attributeOptions[index].colorList;\r\n        return newColorList;\r\n    }\r\n\r\n    const itemList = getItemListFromId(currentAttribute);\r\n    const colorList = getColorListFromId(currentAttribute);\r\n\r\n    return (\r\n        <article className=\"EditPanel\">\r\n            <AttributeSelection attributeOptions={attributeOptions} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n            <AttributeOptions currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} itemList={itemList} colorList={colorList} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\n//import { useParams } from 'react-router';\r\nimport { CatView } from '../../components/CatView/CatView';\r\nimport { EditPanel } from '../../components/EditPanel/EditPanel';\r\nimport { CatPropsType } from '../../utils/CatPropsType';\r\nimport { AttributeOptionType } from '../../utils/AttributeOptionType';\r\nimport './Creator.css';\r\n\r\ninterface CreatorProps {\r\n    catProps: CatPropsType;\r\n    attributeOptions: AttributeOptionType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const Creator: React.FC<CreatorProps> = ({ catProps, attributeOptions, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    //const { id } = useParams<{ id: string }>();\r\n\r\n    return (\r\n        <article className=\"Creator\">\r\n            <CatView catProps={catProps} currentAttribute={currentAttribute} />\r\n            <EditPanel attributeOptions={attributeOptions} currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n        </article>\r\n    )\r\n}","export const initialCatProps = {\r\n    id: 0,\r\n    catName: \"Gato nuevo\",\r\n    creationDate: Date.now(),\r\n    settings: [\r\n        {\r\n            id: \"fur\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"#EBEBEB\",\r\n            stroke: \"AFAFAF\"\r\n        },\r\n        {\r\n            id: \"eyes\",\r\n            type: \"expanded\",\r\n            fill: \"#0BF86A\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"necklace\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n        {\r\n            id: \"hat\",\r\n            type: \"blank\",\r\n            fill: \"#ffffff\",\r\n            shadow: \"none\",\r\n            stroke: \"none\"\r\n        },\r\n    ]\r\n}","export const initialAttributeOptions = [\r\n    {\r\n        id: \"fur\",\r\n        url: \"attributes/fur\",\r\n        checked: true,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"lines\",\r\n                url: \"items/lines\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"colorAndWhite\",\r\n                url: \"items/colorAndWhite\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"siamese\",\r\n                url: \"items/siamese\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 4,\r\n                value: \"tricolor\",\r\n                url: \"items/tricolor\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                fill: \"#FFFFFF\",\r\n                shadow: \"#EBEBEB\",\r\n                stroke: \"#AFAFAF\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                fill: \"#303030\",\r\n                shadow: \"#000000\",\r\n                stroke: \"#AFAFAF\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"eyes\",\r\n        url: \"attributes/eyes\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"expanded\",\r\n                url: \"items/expanded\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"normal\",\r\n                url: \"items/normal\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 2,\r\n                value: \"contracted\",\r\n                url: \"items/contracted\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                fill: \"#0BF86A\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                fill: \"#05F0FF\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                fill: \"#FF78CB\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"necklace\",\r\n        url: \"attributes/necklace\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"round\",\r\n                url: \"items/round\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"heart\",\r\n                url: \"items/heart\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"ribbon\",\r\n                url: \"items/ribbon\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                fill: \"#ffffff\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                fill: \"#000000\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                fill: \"#DC1515\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"hat\",\r\n        url: \"attributes/hat\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                fill: \"#ffffff\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                fill: \"#000000\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                fill: \"#DC1515\",\r\n                shadow: \"none\",\r\n                stroke: \"none\",\r\n                checked: false\r\n            }\r\n        ]\r\n    }\r\n];","import React, { useState } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Creator } from '../Creator/Creator';\r\nimport './App.css';\r\n\r\nimport { initialCatProps } from './initialCatProps';\r\nimport { initialAttributeOptions } from './initialSettingsOptions';\r\n\r\nexport const App = () => {\r\n    const [catProps, setCatProps] = useState(initialCatProps);\r\n    const [attributeOptions, setAttributeList] = useState(initialAttributeOptions);\r\n    const [currentAttribute, setCurrentAttribute] = useState(\"fur\");\r\n\r\n    const handleCurrentAttribute = (newCurrentAttribute: string) => {\r\n        const copy = attributeOptions.slice();\r\n        copy.forEach(e => {\r\n            if (e.id === newCurrentAttribute) {\r\n                e.checked = true;\r\n            } else e.checked = false;\r\n        })\r\n        setAttributeList(copy);\r\n        setCurrentAttribute(newCurrentAttribute);\r\n    }\r\n\r\n    const handleAttributeType = (newType: string) => {\r\n        const catPropsCopy = { ...catProps };\r\n        const catSettingsIndex = catPropsCopy.settings.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catPropsCopy.settings[catSettingsIndex].type = newType;\r\n\r\n        const settingsOptionsCopy = attributeOptions.slice();\r\n        const settingsOptionsIndex = settingsOptionsCopy.findIndex(elem => {\r\n            return elem.id === currentAttribute;\r\n        })\r\n\r\n        settingsOptionsCopy[settingsOptionsIndex].itemList.forEach(elem => {\r\n            if (elem.value === catPropsCopy.settings[catSettingsIndex].type) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(settingsOptionsCopy);\r\n    }\r\n\r\n    const handleAttributeColor = (newColor: string) => {\r\n        const catPropsCopy = { ...catProps };\r\n        const catSettingsIndex = catPropsCopy.settings.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catPropsCopy.settings[catSettingsIndex].fill = newColor;\r\n\r\n        const settingsOptionsCopy = initialAttributeOptions.slice();\r\n        const settingsOptionsIndex = settingsOptionsCopy.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        })\r\n\r\n        settingsOptionsCopy[settingsOptionsIndex].colorList.forEach(elem => {\r\n            if (elem.fill === catPropsCopy.settings[catSettingsIndex].fill) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(settingsOptionsCopy);\r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <Route path=\"/\" render={() =>\r\n                    <Creator catProps={catProps} attributeOptions={attributeOptions} currentAttribute={currentAttribute} onEditAttributeType={handleAttributeType} onEditAttributeColor={handleAttributeColor} onChangeCurrentAttribute={handleCurrentAttribute} />}\r\n                />\r\n            </HashRouter>\r\n        </main>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}