{"version":3,"sources":["components/CatView/CatView.tsx","utils/getImageSrcFromUrl.ts","components/AttributeItem/AttributeItem.tsx","components/AttributeSelection/AttributeSelection.tsx","components/ColorItem/ColorItem.tsx","components/ColorSection/ColorSection.tsx","components/EditItem/EditItem.tsx","components/EditSection/EditSection.tsx","components/EditOptions/EditOptions.tsx","utils/getTitleFromAttribute.ts","components/EditPanel/EditPanel.tsx","containers/Creator/Creator.tsx","containers/App/initialCatAttributes.ts","containers/App/initialCatProps.ts","containers/App/App.tsx","index.tsx"],"names":["CatView","catProps","catFur","attributeList","catEyes","className","path","process","selector","fill","color","baseUrl","getImageSrcFromUrl","url","includes","AttributeItem","value","checked","onChangeCurrentAttribute","imageSrc","onClick","src","alt","AttributeSelection","map","id","attribute","ColorItem","onEditAttributeColor","checkedSrc","style","backgroundColor","ColorSection","colorList","EditItem","onEditAttributeType","EditSection","itemList","EditOptions","currentAttribute","title","getTitleFromAttribute","EditPanel","newAttribute","index","slice","findIndex","elem","getItemListFromAttribute","getColorListFromAttribute","Creator","initialCatAttributes","initialCatProps","catName","type","App","useState","setCatProps","setAttributeList","setCurrentAttribute","handleCurrentAttribute","newCurrentAttribute","copy","forEach","e","handleAttributeType","newType","catPropsCopy","catPropIndex","attributeListCopy","attributeIndex","handleAttributeColor","newColor","catIndex","basename","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14e6ed63.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CatPropType } from '../../utils/CatPropType';\r\nimport { SvgLoader, SvgProxy } from \"react-svgmt\";\r\nimport './CatView.css';\r\n\r\ninterface CatViewProps {\r\n    catProps: CatPropType;\r\n}\r\n\r\nexport const CatView: React.FC<CatViewProps> = ({ catProps }) => {\r\n    const catFur = catProps.attributeList[0];\r\n    const catEyes = catProps.attributeList[1];\r\n    return (\r\n        <article className=\"CatView\">\r\n            <SvgLoader path={`${process.env.PUBLIC_URL}/images/render/catsvg.svg`}>\r\n                <SvgProxy selector=\"#eye-left-color\" fill={catEyes.color} />\r\n                <SvgProxy selector=\"#eye-right-color\" fill={catEyes.color} />\r\n                <SvgProxy selector=\"#head\" fill={catFur.color} />\r\n                <SvgProxy selector=\"#ear-left-outside\" fill={catFur.color} />\r\n                <SvgProxy selector=\"#ear-right-outside\" fill={catFur.color} />\r\n                <SvgProxy selector=\"#body-front\" fill={catFur.color} />\r\n                <SvgProxy selector=\"#body-back\" fill={catFur.color} />\r\n                <SvgProxy selector=\"#tail\" fill={catFur.color} />\r\n            </SvgLoader>\r\n            {/*<h4>Atributo: {catProps[0].attribute} = Tipo: {catProps[0].type} y Color: {catProps[0].color}</h4>\r\n            <h4>Atributo: {catProps[1].attribute} = Tipo: {catProps[1].type} y Color: {catProps[1].color}</h4>\r\n            <h4>Atributo: {catProps[2].attribute} = Tipo: {catProps[2].type} y Color: {catProps[2].color}</h4>\r\n    <h4>Atributo: {catProps[3].attribute} = Tipo: {catProps[3].type} y Color: {catProps[3].color}</h4>*/}\r\n        </article>\r\n    )\r\n}","const baseUrl = `${process.env.PUBLIC_URL}/images/`\r\n\r\nexport const getImageSrcFromUrl = (url: string) => {\r\n    if (url.includes(\"blank\")) {\r\n        return undefined;\r\n    } else return `${baseUrl}${url}.svg`;\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './AttributeItem.css'\r\n\r\ninterface AttributeItemProps {\r\n    value: string;\r\n    url: string;\r\n    checked: boolean;\r\n    onChangeCurrentAttribute: () => void;\r\n}\r\n\r\nexport const AttributeItem:React.FC<AttributeItemProps> = ({ value, url, checked, onChangeCurrentAttribute }) => {\r\n    const imageSrc = getImageSrcFromUrl(url)\r\n\r\n    return(\r\n        <div className={`AttributeItem${checked ? \" AttributeItem--selected\" : \"\"}`} onClick={onChangeCurrentAttribute}>\r\n            <img className={`AttributeItem__image`} src={imageSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { AttributeItem } from '../AttributeItem/AttributeItem';\r\nimport './AttributeSelection.css';\r\n\r\ninterface AttributeSelectionProps {\r\n    attributeList: AttributeType[];\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const AttributeSelection: React.FC<AttributeSelectionProps> = ({ attributeList, onChangeCurrentAttribute }) => {\r\n    return (\r\n        <section className=\"AttributeSelection\">\r\n            {attributeList.map(({ id, attribute, url, checked }) => {\r\n\r\n                const intermediateChangeAttribute = () => {\r\n                    onChangeCurrentAttribute(attribute)\r\n                }\r\n\r\n                return <AttributeItem key={id} value={attribute} url={url} checked={checked} onChangeCurrentAttribute={intermediateChangeAttribute}/>\r\n            })}\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './ColorItem.css';\r\n\r\ninterface ColorItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    onEditAttributeColor: () => void;\r\n}\r\n\r\nexport const ColorItem: React.FC<ColorItemProps> = ({ value, checked, onEditAttributeColor }) => {\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n    return (\r\n        <div className=\"ColorItem\" style={ {backgroundColor: value} } onClick={onEditAttributeColor}>\r\n            <img className={`ColorItem__check${checked ? '' : ' ColorItem__check--remove'}`} src={checkedSrc} alt=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorType } from '../../utils/ColorType';\r\nimport { ColorItem } from '../ColorItem/ColorItem';\r\nimport './ColorSection.css';\r\n\r\ninterface ColorSectionProps {\r\n    colorList: ColorType[];\r\n    onEditAttributeColor: (newColor: string) => void;\r\n}\r\n\r\nexport const ColorSection: React.FC<ColorSectionProps> = ({ colorList, onEditAttributeColor }) => {\r\n    return(\r\n        <section className=\"ColorSection\">\r\n            <h3 className=\"ColorSection__title\">Color</h3>\r\n            <div className=\"ColorSection__items\">\r\n                {colorList.map(({ id, value, checked}) => {\r\n                    const intermediateEditColor = () => {\r\n                        onEditAttributeColor(value);\r\n                    }\r\n                    return <ColorItem key={id} value={value} checked={checked} onEditAttributeColor={intermediateEditColor} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { getImageSrcFromUrl } from '../../utils/getImageSrcFromUrl';\r\nimport './EditItem.css';\r\n\r\ninterface EditItemProps {\r\n    value: string;\r\n    checked: boolean;\r\n    url: string;\r\n    onEditAttributeType: () => void;\r\n}\r\n\r\nexport const EditItem: React.FC<EditItemProps> = ({ value, url, checked, onEditAttributeType }) => {\r\n    const imageSrc = getImageSrcFromUrl(url);\r\n    const checkedSrc = getImageSrcFromUrl(\"items/checked\");\r\n\r\n    return (\r\n        <div className=\"EditItem\" onClick={onEditAttributeType}>\r\n            <img className=\"EditItem__image\" src={imageSrc} alt=\"\" />\r\n            <img className={`EditItem__check${checked ? '' : ' EditItem__check--remove'}`} src={checkedSrc} alt=\"\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { EditItem } from '../EditItem/EditItem';\r\nimport './EditSection.css';\r\n\r\ninterface EditSectionProps {\r\n    itemList: { id: number, value: string, url: string, checked: boolean }[];\r\n    onEditAttributeType: (newType: string) => void;\r\n}\r\n\r\nexport const EditSection: React.FC<EditSectionProps> = ({ itemList, onEditAttributeType }) => {\r\n    return (\r\n        <section className=\"EditSection\">\r\n            <h3 className=\"EditSection__title\">Tipo</h3>\r\n            <div className=\"EditSection__items\">\r\n                {itemList.map(({ id, value, url, checked }) => {\r\n                    const intermediateEditType = () => {\r\n                        onEditAttributeType(value);\r\n                    }\r\n                    return <EditItem key={id} value={value} url={url} checked={checked} onEditAttributeType={intermediateEditType} />\r\n                })}\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport { ColorType } from '../../utils/ColorType';\r\nimport { getTitleFromAttribute } from '../../utils/getTitleFromAttribute';\r\nimport { ItemType } from '../../utils/ItemType';\r\nimport { ColorSection } from '../ColorSection/ColorSection';\r\nimport { EditSection } from '../EditSection/EditSection';\r\nimport \"./EditOptions.css\";\r\n\r\ninterface EditOptionsProps {\r\n    currentAttribute: string;\r\n    itemList: ItemType[];\r\n    colorList: ColorType[];\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor:string) => void;\r\n}\r\n\r\nexport const EditOptions: React.FC<EditOptionsProps> = ({ currentAttribute, itemList, colorList, onEditAttributeType, onEditAttributeColor }) => {\r\n    //const typeListt = getTypeListByAttribute(currentAttribute);\r\n    const title = getTitleFromAttribute(currentAttribute);\r\n\r\n    return (\r\n        <section className=\"EditOptions\">\r\n            <h2 className=\"EditOptions__title\">{title}</h2>\r\n            <EditSection itemList={itemList} onEditAttributeType={onEditAttributeType} />\r\n            <ColorSection colorList={colorList} onEditAttributeColor={onEditAttributeColor} />\r\n        </section>\r\n    )\r\n}","export const getTitleFromAttribute = (attribute: string) => {\r\n    switch (attribute) {\r\n        case \"fur\":\r\n            return \"Pelaje\";\r\n\r\n        case \"eyes\":\r\n            return \"Ojos\";\r\n\r\n        case \"necklace\":\r\n            return \"Collar\";\r\n\r\n        case \"hat\":\r\n            return \"Sombrero\";\r\n\r\n        case \"scene\":\r\n            return \"Escenario\";\r\n    }\r\n}","import React from 'react';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { AttributeSelection } from '../AttributeSelection/AttributeSelection';\r\nimport { EditOptions } from '../EditOptions/EditOptions';\r\nimport './EditPanel.css';\r\n\r\ninterface EditPanelProps {\r\n    attributeList: AttributeType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const EditPanel: React.FC<EditPanelProps> = ({ attributeList, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    const getItemListFromAttribute = (newAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.attribute === newAttribute;\r\n        })\r\n        const newItemList = attributeList[index].itemList;\r\n        return newItemList;\r\n    };\r\n\r\n    const getColorListFromAttribute = (newAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        const index = copy.findIndex((elem) => {\r\n            return elem.attribute === newAttribute;\r\n        })\r\n        const newColorList = attributeList[index].colorList;\r\n        return newColorList;\r\n    }\r\n\r\n    const itemList = getItemListFromAttribute(currentAttribute);\r\n    const colorList = getColorListFromAttribute(currentAttribute);\r\n\r\n    return (\r\n        <article className=\"EditPanel\">\r\n            <AttributeSelection attributeList={attributeList} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n            <EditOptions currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} itemList={itemList} colorList={colorList} />\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\n//import { useParams } from 'react-router';\r\nimport { CatView } from '../../components/CatView/CatView';\r\nimport { EditPanel } from '../../components/EditPanel/EditPanel';\r\nimport { AttributeType } from '../../utils/AttributeType';\r\nimport { CatPropType } from '../../utils/CatPropType';\r\nimport './Creator.css';\r\n\r\ninterface CreatorProps {\r\n    catProps: CatPropType;\r\n    attributeList: AttributeType[];\r\n    currentAttribute: string;\r\n    onEditAttributeType: (newType: string) => void;\r\n    onEditAttributeColor: (newColor: string) => void;\r\n    onChangeCurrentAttribute: (newCurrentAttribute: string) => void;\r\n}\r\n\r\nexport const Creator: React.FC<CreatorProps> = ({ catProps, attributeList, currentAttribute, onEditAttributeType, onEditAttributeColor, onChangeCurrentAttribute }) => {\r\n\r\n    //const { id } = useParams<{ id: string }>();\r\n\r\n    return (\r\n        <article className=\"Creator\">\r\n            <CatView catProps={catProps} />\r\n            <EditPanel attributeList={attributeList} currentAttribute={currentAttribute} onEditAttributeType={onEditAttributeType} onEditAttributeColor={onEditAttributeColor} onChangeCurrentAttribute={onChangeCurrentAttribute} />\r\n        </article>\r\n    )\r\n}","export const initialCatAttributes = [\r\n    {\r\n        id: 0,\r\n        attribute: \"fur\",\r\n        url: \"attributes/fur\",\r\n        checked: true,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"lines\",\r\n                url: \"items/lines\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"colorAndWhite\",\r\n                url: \"items/colorAndWhite\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 3,\r\n                value: \"siamese\",\r\n                url: \"items/siamese\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 4,\r\n                value: \"tricolor\",\r\n                url: \"items/tricolor\",\r\n                checked: false\r\n            }\r\n        ],\r\n\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#303030\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 1,\r\n        attribute: \"eyes\",\r\n        url: \"attributes/eyes\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"expanded\",\r\n                url: \"items/expanded\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"normal\",\r\n                url: \"items/normal\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 2,\r\n                value: \"contracted\",\r\n                url: \"items/contracted\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#0BF86A\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#05F0FF\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#FF78CB\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        attribute: \"necklace\",\r\n        url: \"attributes/necklace\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"round\",\r\n                url: \"items/round\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"heart\",\r\n                url: \"items/heart\",\r\n                checked: false\r\n            },\r\n            {\r\n\r\n                id: 3,\r\n                value: \"ribbon\",\r\n                url: \"items/ribbon\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: 3,\r\n        attribute: \"hat\",\r\n        url: \"attributes/hat\",\r\n        checked: false,\r\n        itemList: [\r\n            {\r\n                id: 0,\r\n                value: \"blank\",\r\n                url: \"items/blank\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"tophat\",\r\n                url: \"items/tophat\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"party\",\r\n                url: \"items/party\",\r\n                checked: false\r\n            }\r\n        ],\r\n        colorList: [\r\n            {\r\n                id: 0,\r\n                value: \"#ffffff\",\r\n                checked: true\r\n            },\r\n            {\r\n                id: 1,\r\n                value: \"#000000\",\r\n                checked: false\r\n            },\r\n            {\r\n                id: 2,\r\n                value: \"#DC1515\",\r\n                checked: false\r\n            }\r\n        ]\r\n    }\r\n];","export const initialCatProps = {\r\n    id: 0,\r\n    catName: \"Gato nuevo\",\r\n    attributeList: [\r\n        {\r\n            id: \"fur\",\r\n            type: \"blank\",\r\n            color: \"#ffffff\",\r\n        },\r\n        {\r\n            id: \"eyes\",\r\n            type: \"expanded\",\r\n            color: \"#0BF86A\",\r\n        },\r\n        {\r\n            id: \"necklace\",\r\n            type: \"blank\",\r\n            color: \"#ffffff\",\r\n        },\r\n        {\r\n            id: \"hat\",\r\n            type: \"blank\",\r\n            color: \"#ffffff\",\r\n        },\r\n    ]\r\n}","import React, { useState } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Creator } from '../Creator/Creator';\r\nimport './App.css';\r\nimport { initialCatAttributes } from './initialCatAttributes';\r\nimport { initialCatProps } from './initialCatProps';\r\n\r\nexport const App = () => {\r\n    const [catProps, setCatProps] = useState(initialCatProps);\r\n    const [attributeList, setAttributeList] = useState(initialCatAttributes);\r\n    const [currentAttribute, setCurrentAttribute] = useState(\"fur\");\r\n\r\n    const handleCurrentAttribute = (newCurrentAttribute: string) => {\r\n        const copy = attributeList.slice();\r\n        copy.forEach(e => {\r\n            if (e.attribute === newCurrentAttribute) {\r\n                e.checked = true;\r\n            } else e.checked = false;\r\n        })\r\n        setAttributeList(copy);\r\n        setCurrentAttribute(newCurrentAttribute);\r\n    }\r\n\r\n    const handleAttributeType = (newType: string) => {\r\n        const catPropsCopy = {...catProps};\r\n        const catPropIndex = catPropsCopy.attributeList.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n        catPropsCopy.attributeList[catPropIndex].type = newType;\r\n\r\n        const attributeListCopy = attributeList.slice();\r\n        const attributeIndex = attributeListCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        })\r\n\r\n        attributeListCopy[attributeIndex].itemList.forEach(elem => {\r\n            if (elem.value === catPropsCopy.attributeList[catPropIndex].type) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(attributeListCopy);\r\n    }\r\n\r\n    const handleAttributeColor = (newColor: string) => {\r\n        const catPropsCopy = {...catProps};\r\n        const catIndex = catPropsCopy.attributeList.findIndex((elem) => {\r\n            return elem.id === currentAttribute;\r\n        });\r\n\r\n        catPropsCopy.attributeList[catIndex].color = newColor;\r\n\r\n        const attributeListCopy = attributeList.slice();\r\n        const attributeIndex = attributeListCopy.findIndex((elem) => {\r\n            return elem.attribute === currentAttribute;\r\n        })\r\n\r\n        attributeListCopy[attributeIndex].colorList.forEach(elem => {\r\n            if (elem.value === catPropsCopy.attributeList[catIndex].color) {\r\n                elem.checked = true;\r\n            } else {\r\n                elem.checked = false;\r\n            }\r\n        })\r\n\r\n        setCatProps(catPropsCopy);\r\n        setAttributeList(attributeListCopy);\r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <Route path=\"/\" render={() =>\r\n                    <Creator catProps={catProps} attributeList={attributeList} currentAttribute={currentAttribute} onEditAttributeType={handleAttributeType} onEditAttributeColor={handleAttributeColor} onChangeCurrentAttribute={handleCurrentAttribute} />}\r\n                />\r\n            </HashRouter>\r\n        </main>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}